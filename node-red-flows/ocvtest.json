[
    {
        "id": "176d1842441d9519",
        "type": "tab",
        "label": "OpenCVTest",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a31ebbfe331374aa",
        "type": "inject",
        "z": "176d1842441d9519",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "start",
        "payloadType": "str",
        "x": 90,
        "y": 100,
        "wires": [
            [
                "516d6c28be79e7cc"
            ]
        ]
    },
    {
        "id": "033027e3240dd42b",
        "type": "function",
        "z": "176d1842441d9519",
        "name": "OcvLoop",
        "func": "\nlet require = global.get('require');\n\nlet cv2 = require('@u4/opencv4nodejs');\n\nif (msg.payload === 'fns'){\n    return;\n}\n\n//node.warn(cv2);\n\n\nlet cvwrap = flow.get('cvwrap');\nlet cvobj;\nif (cvwrap){\n    cvobj = cvwrap();\n    if (!cvobj){\n        node.error('error with cvobj!');\n        return;\n    }\n    //let im2 = cvobj.fns.canny(cvobj, im);\n} else {\n    node.error('run cv requirer first!');\n    return;\n}\n\nlet stop = ()=>{\n    if (cvobj.Vcap) cvobj.Vcap.release();    \n    if (cvobj.sink) cvobj.sink.release();\n    cvobj.Vcap = null;\n    cvobj.sink = null;\n    return;\n};\n\nif (msg.payload === 'stop'){\n    node.warn('setting abort flag');\n    context = {\n        abort:true,\n    };\n    node.warn('releaseing capture and writer - expect errors');\n    stop();\n    return;\n}\n\nif (msg.payload === 'edgeit'){\n    context.edgeit = true;\n    return;\n}\nif (msg.payload === 'edgeoff'){\n    context.edgeit = false;\n    return;\n}\n\n\nif (msg.payload === 'start'){\n    try {\n\n        let opts = cvobj.capture_opts;\n        \n        node.warn(\n            `starting opencv loop ${opts.capwidth}x${opts.capheight}@${opts.capfps}->`+\n            ` ${opts.sinkwidth}x${opts.sinkheight}@${opts.sinkfps} h264 level ${opts.sinklevel} profile ${opts.sinkprofile}`);\n        \n        context = {\n            abort:false,\n        };\n        \n        let capfpsstr = ''+opts.capfps+'/1';\n        if (opts.capfps !== Math.round(opts.capfps)){\n            capfpsstr = ''+(Math.round(opts.capfps)*1000)+'/1001';\n            opts.capfps =  Math.round(opts.capfps)*1000/1001;\n        }\n\n        let capstr = `v4l2src ! video/x-raw, format=BGR, width=${opts.capwidth}, height=${opts.capheight}, framerate=${capfpsstr} ! appsink`;\n\n        node.warn(`cap:[${capstr}]`);\n        \n        cvobj.Vcap = new cv2.VideoCapture(\n            capstr, \n            cv2.CAP_GSTREAMER);\n        \n        if (!cvobj.Vcap){\n            node.error('no cvobj.Vcap');\n            return;;\n        }\n        \n        let sinkstr;\n        let sinkw = opts.sinkwidth;\n        let sinkh = opts.sinkheight;\n        \n        let sinkfpsstr = ''+opts.sinkfps+'/1';\n        if (opts.sinkfps !== Math.round(opts.sinkfps)){\n            sinkfpsstr = ''+(Math.round(opts.sinkfps)*1000)+'/1001';\n            opts.sinkfps =  Math.round(opts.sinkfps)*1000/1001;\n        }\n        \n        if (opts.scaler === 'gst'){\n            // use a gstreamer scaler - faster\n            sinkw = opts.capwidth;\n            sinkh = opts.capheight;\n            sinkstr = \n                `appsrc caps=video/x-raw,format=BGR,width=${sinkw},height=${sinkh},framerate=${sinkfpsstr} ! `+\n                `videoscale method=0 ! `+ `video/x-raw,width=${opts.sinkwidth},height=${opts.sinkheight} ! `+\n                `videoconvert ! `+\n                \"v4l2h264enc ! \"+\n                // note: trying to set width/height in encoder does NOT work\n                `video/x-h264,level=(string)${opts.sinklevel}${opts.sinkprofile?',profile='+opts.sinkprofile:''} ! ` +\n                \"h264parse config-interval=1 ! rtph264pay ! \"+\n                \"udpsink host=127.0.0.1 port=8004 sync=false\"\n        } else {\n            // scaler is ocv or none\n            sinkstr = \n                `appsrc caps=video/x-raw,format=BGR,width=${sinkw},height=${sinkh},framerate=${sinkfpsstr} ! `+\n                `videoconvert ! `+\n                \"v4l2h264enc ! \"+\n                //,width=${opts.sinkwidth},height=${opts.sinkheight}\n                `video/x-h264,level=(string)${opts.sinklevel}${opts.sinkprofile?',profile='+opts.sinkprofile:''} ! ` +\n                \"h264parse config-interval=1 ! rtph264pay ! \"+\n                \"udpsink host=127.0.0.1 port=8004 sync=false\"\n        }\n        node.warn(`sink:[${sinkstr}]`);\n        \n        // to local janus?\n        cvobj.sink = new cv2.VideoWriter(\n            sinkstr, \n            0, opts.sinkfps, \n            new cv2.Size(sinkw, sinkh));\n\n        if (!cvobj.sink){\n            node.error('no cvobj.sink');\n            stop();\n            return;;\n        }\n            \n        let frames = 0;\n        let ocvresizes = 0;\n        let start = 0;//(new Date()).valueOf();\n        \n        let displaytext = 'fps unknown';\n        \n        \n        let asyncframe = 0;\n        let asyncinterval = 12;\n        \n        let overlay = new cv2.Mat(opts.capheight, opts.capwidth, cv2.CV_8UC3);\n        overlay.setTo(cvobj.colours.black);\n        \n        let rectstruct = {\n            rect: new cvobj.cv2.Rect(100, 100, 100, 100),\n            rectcolour: 'green',\n            rectthickness: 2,\n            text: 'hello',\n            textcolour: 'white',\n            //textx?: 0,\n            //texty?: 0,\n        };\n\n        let hud = null;\n\n        \n        overlay.setTo(cvobj.colours.black);\n\n        hud = overlay;        \n\n        let readone = ()=>{\n            if (context.abort){\n                node.error('aborting Opencv loop');\n                stop();\n                return;\n            }\n            if (!cvobj.Vcap) return;\n            cvobj.Vcap.readAsync()\n        \t.then((frame)=>{\n        \t    try {\n                \tif (context.abort){\n                        node.error('aborting Opencv loop');\n                        stop();\n                        return;\n                    }\n\n                    const text = ''+displaytext;\n                    const org = new cv2.Point(20, 20);\n                    const fontFace = cv2.FONT_HERSHEY_SIMPLEX;\n                    const fontScale = 0.5;\n                    const textColor = new cv2.Vec(255, 0, 0);\n                    const thickness = 2;\n                    \n                    \n                    if (context.edgeit){\n                        if (!cvobj.asyncInProgess){\n                            if (asyncframe + asyncinterval < frames){\n                                asyncframe = frames;\n                                cvobj.asyncInProgess = true;\n                                cvobj.fns.canny(cvobj, frame, (err, im)=>{\n                                    if (err) {\n                                        node.error(err);\n                                        return;\n                                    }\n                                    try{\n                                        hud = im.cvtColor(cvobj.cv2.COLOR_GRAY2BGR);\n                                        cvobj.asyncInProgess = false;\n                                    } catch(e){\n                                        node.error(e);\n                                    }\n                                });\n                            }\n                        }\n                        //frame = im2.cvtColor(cvobj.cv2.COLOR_GRAY2BGR);\n                        //im2.release();\n                    }\n                    \n                    \n                    // clearing, drawing onto and overlaying adds about 20% cpu\n                    //rectstruct.rect = new cvobj.cv2.Rect(100, 100+(frames%200), 100, 100);//.y = ;\n                    //overlay.setTo(cvobj.colours.black);\n                    //cvobj.fns.drawRects(overlay, [rectstruct]);\n\n                    cvobj.fns.overlay(frame, hud, (outframe)=>{\n                    \tif (context.abort){\n                            node.error('aborting Opencv loop');\n                            stop();\n                            return;\n                        }\n                        // put text on the object\n                        outframe.putText(text, org, fontFace, fontScale, textColor, thickness);\n                        \n                        // check the farmesize we need for our sink (see above, opts.scaler)\n                        if ((sinkw !== opts.capwidth) || (sinkh !== opts.capheight)){\n                            outframe = outframe.resize(sinkh, sinkw, cv2.INTER_NEAREST);\n                            ocvresizes++;\n                            //outframe = frame.resize(opts.sinkheight, opts.sinkwidth);\n                        }\n                    \n                        if (!cvobj.sink) return;\n                    \tcvobj.sink.writeAsync(outframe)\n                    \t.then(()=>{\n                        \toutframe.release();\n                        \tframes++;\n                        \t\n                        \t// mearue frame timine from 10th frame - after preload, settling, etc.\n                        \tif (start === 0 && frames === 10){\n                        \t    start = (new Date()).valueOf();\n                        \t}\n                        \tif (0 === (frames % 50)){\n                            \tlet now = (new Date()).valueOf();\n                            \tlet delay = (now - start)/1000;\n                            \tif (delay === 0) delay += 0.04;\n                            \tlet fps = (frames-10)/delay;\n                        \t    fps = ((fps*10000)>>0)/10000;\n                        \t    displaytext = fps+' fps';\n                        \t    node.warn('fps is '+fps+' ocvresizes:'+ocvresizes);\n                        \t}\n                        \t//console.log('fps'+fps);\n                        \tif (context.abort){\n                                node.error('aborting Opencv loop');\n                                stop();\n                                return;\n                            }\n\n                        \tsetTimeout(readone, 1);\n                    \t})\n                    \t.catch((e)=>{\n                    \t    console.error(e);\n                            stop();\n                            return;\n                    \t});\n                    });\n\n        \t    } catch(e){\n            \t    console.error(e);\n                    stop();\n                    return;\n        \t    }\n        \t})\n        \t.catch((e)=>{\n        \t    console.error(e);\n                stop();\n                return;\n        \t});\n        }\n        node.warn('setup and starting.....');\n        readone();    \n    } catch(e) {\n        node.error('exception in start')\n        node.error(e)\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\ncontext.abort = true;\n",
        "libs": [],
        "x": 420,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "8fb98033a9f4df52",
        "type": "inject",
        "z": "176d1842441d9519",
        "name": "stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "stop",
        "payloadType": "str",
        "x": 90,
        "y": 140,
        "wires": [
            [
                "033027e3240dd42b"
            ]
        ]
    },
    {
        "id": "29c5940d71f3402d",
        "type": "comment",
        "z": "176d1842441d9519",
        "name": "janus proxy - working",
        "info": "",
        "x": 140,
        "y": 300,
        "wires": []
    },
    {
        "id": "fc62a2178d0741af",
        "type": "http in",
        "z": "176d1842441d9519",
        "name": "",
        "url": "/janus*",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "64ca8ffa2f0f0d74",
                "806c50d3a3ab2540"
            ]
        ]
    },
    {
        "id": "544debfa64b4de0e",
        "type": "http request",
        "z": "176d1842441d9519",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 430,
        "y": 280,
        "wires": [
            [
                "97d5165b653f03f1"
            ]
        ]
    },
    {
        "id": "64ca8ffa2f0f0d74",
        "type": "function",
        "z": "176d1842441d9519",
        "name": "",
        "func": "msg.method = msg.req.method;\nmsg.url = 'http://127.0.0.1:8088'+msg.req.url;\n\n//node.warn(msg.req.ip);\n\n/*\nmsg.headers = msg.headers || {};\nmsg.headers['X-Forwarded-For'] = msg.req.ip;\nmsg.headers['X-Real-IP'] = msg.req.ip;\n\nmsg.headers['Forwarded'] = 'for='+msg.req.ip;\n*/\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 340,
        "wires": [
            [
                "544debfa64b4de0e"
            ]
        ]
    },
    {
        "id": "97d5165b653f03f1",
        "type": "http response",
        "z": "176d1842441d9519",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 590,
        "y": 340,
        "wires": []
    },
    {
        "id": "5b95f53fec023f78",
        "type": "http in",
        "z": "176d1842441d9519",
        "name": "",
        "url": "/video.html",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 440,
        "wires": [
            [
                "be1aa87b8ab70d75"
            ]
        ]
    },
    {
        "id": "be1aa87b8ab70d75",
        "type": "template",
        "z": "176d1842441d9519",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    <title>Janus WebRTC Streaming with Image Detection</title>\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/webrtc-adapter/6.4.0/adapter.min.js\" ></script>\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/1.7.2/jquery.min.js\" ></script>\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.0.2/js/bootstrap.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/4.1.0/bootbox.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/spin.js/2.3.2/spin.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.1.3/toastr.min.js\"></script>\n    <script type=\"text/javascript\" src=\"/js/janus.js\" ></script>\n    <script type=\"text/javascript\" src=\"/js/streaming.js\"></script>\n    <link rel=\"stylesheet\" href=\"/css/streaming.css\" type=\"text/css\"/>\n\n</head>\n<body>\n    <div class=\"panel-body\" id=\"stream\" style=\"width:50vw; height:50vh; border:solid black 1px;\"></div>\n</body>\n",
        "output": "str",
        "x": 300,
        "y": 440,
        "wires": [
            [
                "e83a7018455faf5f"
            ]
        ]
    },
    {
        "id": "e83a7018455faf5f",
        "type": "http response",
        "z": "176d1842441d9519",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 480,
        "y": 440,
        "wires": []
    },
    {
        "id": "0f4950dfde7d1c9c",
        "type": "template",
        "z": "176d1842441d9519",
        "name": "Janus.js",
        "field": "payload",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "/*\n\tThe MIT License (MIT)\n\tCopyright (c) 2016 Meetecho\n\tPermission is hereby granted, free of charge, to any person obtaining\n\ta copy of this software and associated documentation files (the \"Software\"),\n\tto deal in the Software without restriction, including without limitation\n\tthe rights to use, copy, modify, merge, publish, distribute, sublicense,\n\tand/or sell copies of the Software, and to permit persons to whom the\n\tSoftware is furnished to do so, subject to the following conditions:\n\tThe above copyright notice and this permission notice shall be included\n\tin all copies or substantial portions of the Software.\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\tOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\tTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n\tOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n\tARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\tOTHER DEALINGS IN THE SOFTWARE.\n */\n\n// List of sessions\nJanus.sessions = {};\n\nJanus.isExtensionEnabled = function() {\n    if(navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia) {\n        // No need for the extension, getDisplayMedia is supported\n        return true;\n    }\n    if(window.navigator.userAgent.match('Chrome')) {\n        var chromever = parseInt(window.navigator.userAgent.match(/Chrome\\/(.*) /)[1], 10);\n        var maxver = 33;\n        if(window.navigator.userAgent.match('Linux'))\n            maxver = 35;\t// \"known\" crash in chrome 34 and 35 on linux\n        if(chromever >= 26 && chromever <= maxver) {\n            // Older versions of Chrome don't support this extension-based approach, so lie\n            return true;\n        }\n        return Janus.extension.isInstalled();\n    } else {\n        // Firefox of others, no need for the extension (but this doesn't mean it will work)\n        return true;\n    }\n};\n\nvar defaultExtension = {\n    // Screensharing Chrome Extension ID\n    extensionId: 'hapfgfdkleiggjjpfpenajgdnfckjpaj',\n    isInstalled: function() { return document.querySelector('#janus-extension-installed') !== null; },\n    getScreen: function (callback) {\n        var pending = window.setTimeout(function () {\n            var error = new Error('NavigatorUserMediaError');\n            error.name = 'The required Chrome extension is not installed: click <a href=\"#\">here</a> to install it. (NOTE: this will need you to refresh the page)';\n            return callback(error);\n        }, 1000);\n        this.cache[pending] = callback;\n        window.postMessage({ type: 'janusGetScreen', id: pending }, '*');\n    },\n    init: function () {\n        var cache = {};\n        this.cache = cache;\n        // Wait for events from the Chrome Extension\n        window.addEventListener('message', function (event) {\n            if(event.origin != window.location.origin)\n                return;\n            if(event.data.type == 'janusGotScreen' && cache[event.data.id]) {\n                var callback = cache[event.data.id];\n                delete cache[event.data.id];\n\n                if (event.data.sourceId === '') {\n                    // user canceled\n                    var error = new Error('NavigatorUserMediaError');\n                    error.name = 'You cancelled the request for permission, giving up...';\n                    callback(error);\n                } else {\n                    callback(null, event.data.sourceId);\n                }\n            } else if (event.data.type == 'janusGetScreenPending') {\n                console.log('clearing ', event.data.id);\n                window.clearTimeout(event.data.id);\n            }\n        });\n    }\n};\n\nJanus.useDefaultDependencies = function (deps) {\n    var f = (deps && deps.fetch) || fetch;\n    var p = (deps && deps.Promise) || Promise;\n    var socketCls = (deps && deps.WebSocket) || WebSocket;\n\n    return {\n        newWebSocket: function(server, proto) { return new socketCls(server, proto); },\n        extension: (deps && deps.extension) || defaultExtension,\n        isArray: function(arr) { return Array.isArray(arr); },\n        webRTCAdapter: (deps && deps.adapter) || adapter,\n        httpAPICall: function(url, options) {\n            var fetchOptions = {\n                method: options.verb,\n                headers: {\n                    'Accept': 'application/json, text/plain, */*'\n                },\n                cache: 'no-cache'\n            };\n            if(options.verb === \"POST\") {\n                fetchOptions.headers['Content-Type'] = 'application/json';\n            }\n            if(options.withCredentials !== undefined) {\n                fetchOptions.credentials = options.withCredentials === true ? 'include' : (options.withCredentials ? options.withCredentials : 'omit');\n            }\n            if(options.body !== undefined) {\n                fetchOptions.body = JSON.stringify(options.body);\n            }\n\n            var fetching = f(url, fetchOptions).catch(function(error) {\n                return p.reject({message: 'Probably a network error, is the server down?', error: error});\n            });\n\n            /*\n\t\t\t * fetch() does not natively support timeouts.\n\t\t\t * Work around this by starting a timeout manually, and racing it agains the fetch() to see which thing resolves first.\n\t\t\t */\n\n            if(options.timeout !== undefined) {\n                var timeout = new p(function(resolve, reject) {\n                    var timerId = setTimeout(function() {\n                        clearTimeout(timerId);\n                        return reject({message: 'Request timed out', timeout: options.timeout});\n                    }, options.timeout);\n                });\n                fetching = p.race([fetching,timeout]);\n            }\n\n            fetching.then(function(response) {\n                if(response.ok) {\n                    if(typeof(options.success) === typeof(Janus.noop)) {\n                        return response.json().then(function(parsed) {\n                            options.success(parsed);\n                        }).catch(function(error) {\n                            return p.reject({message: 'Failed to parse response body', error: error, response: response});\n                        });\n                    }\n                }\n                else {\n                    return p.reject({message: 'API call failed', response: response});\n                }\n            }).catch(function(error) {\n                if(typeof(options.error) === typeof(Janus.noop)) {\n                    options.error(error.message || '<< internal error >>', error);\n                }\n            });\n\n            return fetching;\n        }\n    }\n};\n\nJanus.useOldDependencies = function (deps) {\n    var jq = (deps && deps.jQuery) || jQuery;\n    var socketCls = (deps && deps.WebSocket) || WebSocket;\n    return {\n        newWebSocket: function(server, proto) { return new socketCls(server, proto); },\n        isArray: function(arr) { return jq.isArray(arr); },\n        extension: (deps && deps.extension) || defaultExtension,\n        webRTCAdapter: (deps && deps.adapter) || adapter,\n        httpAPICall: function(url, options) {\n            var payload = options.body !== undefined ? {\n                contentType: 'application/json',\n                data: JSON.stringify(options.body)\n            } : {};\n            var credentials = options.withCredentials !== undefined ? {xhrFields: {withCredentials: options.withCredentials}} : {};\n\n            return jq.ajax(jq.extend(payload, credentials, {\n                url: url,\n                type: options.verb,\n                cache: false,\n                dataType: 'json',\n                async: options.async,\n                timeout: options.timeout,\n                success: function(result) {\n                    if(typeof(options.success) === typeof(Janus.noop)) {\n                        options.success(result);\n                    }\n                },\n                error: function(xhr, status, err) {\n                    if(typeof(options.error) === typeof(Janus.noop)) {\n                        options.error(status, err);\n                    }\n                }\n            }));\n        },\n    };\n};\n\nJanus.noop = function() {};\n\nJanus.dataChanDefaultLabel = \"JanusDataChannel\";\n\n// Initialization\nJanus.init = function(options) {\n    options = options || {};\n    options.callback = (typeof options.callback == \"function\") ? options.callback : Janus.noop;\n    if(Janus.initDone === true) {\n        // Already initialized\n        options.callback();\n    } else {\n        if(typeof console == \"undefined\" || typeof console.log == \"undefined\")\n            console = { log: function() {} };\n        // Console logging (all debugging disabled by default)\n        Janus.trace = Janus.noop;\n        Janus.debug = Janus.noop;\n        Janus.vdebug = Janus.noop;\n        Janus.log = Janus.noop;\n        Janus.warn = Janus.noop;\n        Janus.error = Janus.noop;\n        if(options.debug === true || options.debug === \"all\") {\n            // Enable all debugging levels\n            Janus.trace = console.trace.bind(console);\n            Janus.debug = console.debug.bind(console);\n            Janus.vdebug = console.debug.bind(console);\n            Janus.log = console.log.bind(console);\n            Janus.warn = console.warn.bind(console);\n            Janus.error = console.error.bind(console);\n        } else if(Array.isArray(options.debug)) {\n            for(var i in options.debug) {\n                var d = options.debug[i];\n                switch(d) {\n                    case \"trace\":\n                        Janus.trace = console.trace.bind(console);\n                        break;\n                    case \"debug\":\n                        Janus.debug = console.debug.bind(console);\n                        break;\n                    case \"vdebug\":\n                        Janus.vdebug = console.debug.bind(console);\n                        break;\n                    case \"log\":\n                        Janus.log = console.log.bind(console);\n                        break;\n                    case \"warn\":\n                        Janus.warn = console.warn.bind(console);\n                        break;\n                    case \"error\":\n                        Janus.error = console.error.bind(console);\n                        break;\n                    default:\n                        console.error(\"Unknown debugging option '\" + d + \"' (supported: 'trace', 'debug', 'vdebug', 'log', warn', 'error')\");\n                        break;\n                }\n            }\n        }\n        Janus.log(\"Initializing library\");\n\n        var usedDependencies = options.dependencies || Janus.useDefaultDependencies();\n        Janus.isArray = usedDependencies.isArray;\n        Janus.webRTCAdapter = usedDependencies.webRTCAdapter;\n        Janus.httpAPICall = usedDependencies.httpAPICall;\n        Janus.newWebSocket = usedDependencies.newWebSocket;\n        Janus.extension = usedDependencies.extension;\n        Janus.extension.init();\n\n        // Helper method to enumerate devices\n        Janus.listDevices = function(callback, config) {\n            callback = (typeof callback == \"function\") ? callback : Janus.noop;\n            if (config == null) config = { audio: true, video: true };\n            if(Janus.isGetUserMediaAvailable()) {\n                navigator.mediaDevices.getUserMedia(config)\n                    .then(function(stream) {\n                        navigator.mediaDevices.enumerateDevices().then(function(devices) {\n                            Janus.debug(devices);\n                            callback(devices);\n                            // Get rid of the now useless stream\n                            try {\n                                var tracks = stream.getTracks();\n                                for(var i in tracks) {\n                                    var mst = tracks[i];\n                                    if(mst !== null && mst !== undefined)\n                                        mst.stop();\n                                }\n                            } catch(e) {}\n                        });\n                    })\n                    .catch(function(err) {\n                        Janus.error(err);\n                        callback([]);\n                    });\n            } else {\n                Janus.warn(\"navigator.mediaDevices unavailable\");\n                callback([]);\n            }\n        }\n        // Helper methods to attach/reattach a stream to a video element (previously part of adapter.js)\n        Janus.attachMediaStream = function(element, stream) {\n            if(Janus.webRTCAdapter.browserDetails.browser === 'chrome') {\n                var chromever = Janus.webRTCAdapter.browserDetails.version;\n                if(chromever >= 52) {\n                    element.srcObject = stream;\n                } else if(typeof element.src !== 'undefined') {\n                    element.src = URL.createObjectURL(stream);\n                } else {\n                    Janus.error(\"Error attaching stream to element\");\n                }\n            } else {\n                element.srcObject = stream;\n            }\n        };\n        Janus.reattachMediaStream = function(to, from) {\n            if(Janus.webRTCAdapter.browserDetails.browser === 'chrome') {\n                var chromever = Janus.webRTCAdapter.browserDetails.version;\n                if(chromever >= 52) {\n                    to.srcObject = from.srcObject;\n                } else if(typeof to.src !== 'undefined') {\n                    to.src = from.src;\n                } else {\n                    Janus.error(\"Error reattaching stream to element\");\n                }\n            } else {\n                to.srcObject = from.srcObject;\n            }\n        };\n        // Detect tab close: make sure we don't loose existing onbeforeunload handlers\n        // (note: for iOS we need to subscribe to a different event, 'pagehide', see\n        // https://gist.github.com/thehunmonkgroup/6bee8941a49b86be31a787fe8f4b8cfe)\n        var iOS = ['iPad', 'iPhone', 'iPod'].indexOf(navigator.platform) >= 0;\n        var eventName = iOS ? 'pagehide' : 'beforeunload';\n        var oldOBF = window[\"on\" + eventName];\n        window.addEventListener(eventName, function(event) {\n            Janus.log(\"Closing window\");\n            for(var s in Janus.sessions) {\n                if(Janus.sessions[s] !== null && Janus.sessions[s] !== undefined &&\n                    Janus.sessions[s].destroyOnUnload) {\n                    Janus.log(\"Destroying session \" + s);\n                    Janus.sessions[s].destroy({asyncRequest: false, notifyDestroyed: false});\n                }\n            }\n            if(oldOBF && typeof oldOBF == \"function\")\n                oldOBF();\n        });\n        // If this is a Safari Technology Preview, check if VP8 is supported\n        Janus.safariVp8 = false;\n        if(Janus.webRTCAdapter.browserDetails.browser === 'safari' &&\n            Janus.webRTCAdapter.browserDetails.version >= 605) {\n            // Let's see if RTCRtpSender.getCapabilities() is there\n            if(RTCRtpSender && RTCRtpSender.getCapabilities && RTCRtpSender.getCapabilities(\"video\") &&\n                RTCRtpSender.getCapabilities(\"video\").codecs && RTCRtpSender.getCapabilities(\"video\").codecs.length) {\n                for(var i in RTCRtpSender.getCapabilities(\"video\").codecs) {\n                    var codec = RTCRtpSender.getCapabilities(\"video\").codecs[i];\n                    if(codec && codec.mimeType && codec.mimeType.toLowerCase() === \"video/vp8\") {\n                        Janus.safariVp8 = true;\n                        break;\n                    }\n                }\n                if(Janus.safariVp8) {\n                    Janus.log(\"This version of Safari supports VP8\");\n                } else {\n                    Janus.warn(\"This version of Safari does NOT support VP8: if you're using a Technology Preview, \" +\n                        \"try enabling the 'WebRTC VP8 codec' setting in the 'Experimental Features' Develop menu\");\n                }\n            } else {\n                // We do it in a very ugly way, as there's no alternative...\n                // We create a PeerConnection to see if VP8 is in an offer\n                var testpc = new RTCPeerConnection({}, {});\n                testpc.createOffer({offerToReceiveVideo: true}).then(function(offer) {\n                    Janus.safariVp8 = offer.sdp.indexOf(\"VP8\") !== -1;\n                    if(Janus.safariVp8) {\n                        Janus.log(\"This version of Safari supports VP8\");\n                    } else {\n                        Janus.warn(\"This version of Safari does NOT support VP8: if you're using a Technology Preview, \" +\n                            \"try enabling the 'WebRTC VP8 codec' setting in the 'Experimental Features' Develop menu\");\n                    }\n                    testpc.close();\n                    testpc = null;\n                });\n            }\n        }\n        // Check if this browser supports Unified Plan and transceivers\n        // Based on https://codepen.io/anon/pen/ZqLwWV?editors=0010\n        Janus.unifiedPlan = false;\n        if(Janus.webRTCAdapter.browserDetails.browser === 'firefox' &&\n            Janus.webRTCAdapter.browserDetails.version >= 59) {\n            // Firefox definitely does, starting from version 59\n            Janus.unifiedPlan = true;\n        } else if(Janus.webRTCAdapter.browserDetails.browser === 'chrome' &&\n            Janus.webRTCAdapter.browserDetails.version < 72) {\n            // Chrome does, but it's only usable from version 72 on\n            Janus.unifiedPlan = false;\n        } else if(!('currentDirection' in RTCRtpTransceiver.prototype)) {\n            // Safari supports addTransceiver() but not Unified Plan when\n            // currentDirection is not defined (see codepen above)\n            Janus.unifiedPlan = false;\n        } else {\n            // Check if addTransceiver() throws an exception\n            const tempPc = new RTCPeerConnection();\n            try {\n                tempPc.addTransceiver('audio');\n                Janus.unifiedPlan = true;\n            } catch (e) {}\n            tempPc.close();\n        }\n        Janus.initDone = true;\n        options.callback();\n    }\n};\n\n// Helper method to check whether WebRTC is supported by this browser\nJanus.isWebrtcSupported = function() {\n    return window.RTCPeerConnection !== undefined && window.RTCPeerConnection !== null;\n};\n// Helper method to check whether devices can be accessed by this browser (e.g., not possible via plain HTTP)\nJanus.isGetUserMediaAvailable = function() {\n    return navigator.mediaDevices !== undefined && navigator.mediaDevices !== null &&\n        navigator.mediaDevices.getUserMedia !== undefined && navigator.mediaDevices.getUserMedia !== null;\n};\n\n// Helper method to create random identifiers (e.g., transaction)\nJanus.randomString = function(len) {\n    var charSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var randomString = '';\n    for (var i = 0; i < len; i++) {\n        var randomPoz = Math.floor(Math.random() * charSet.length);\n        randomString += charSet.substring(randomPoz,randomPoz+1);\n    }\n    return randomString;\n}\n\n\nfunction Janus(gatewayCallbacks) {\n    if(Janus.initDone === undefined) {\n        gatewayCallbacks.error(\"Library not initialized\");\n        return {};\n    }\n    if(!Janus.isWebrtcSupported()) {\n        gatewayCallbacks.error(\"WebRTC not supported by this browser\");\n        return {};\n    }\n    Janus.log(\"Library initialized: \" + Janus.initDone);\n    gatewayCallbacks = gatewayCallbacks || {};\n    gatewayCallbacks.success = (typeof gatewayCallbacks.success == \"function\") ? gatewayCallbacks.success : Janus.noop;\n    gatewayCallbacks.error = (typeof gatewayCallbacks.error == \"function\") ? gatewayCallbacks.error : Janus.noop;\n    gatewayCallbacks.destroyed = (typeof gatewayCallbacks.destroyed == \"function\") ? gatewayCallbacks.destroyed : Janus.noop;\n    if(gatewayCallbacks.server === null || gatewayCallbacks.server === undefined) {\n        gatewayCallbacks.error(\"Invalid server url\");\n        return {};\n    }\n    var websockets = false;\n    var ws = null;\n    var wsHandlers = {};\n    var wsKeepaliveTimeoutId = null;\n\n    var servers = null, serversIndex = 0;\n    var server = gatewayCallbacks.server;\n    if(Janus.isArray(server)) {\n        Janus.log(\"Multiple servers provided (\" + server.length + \"), will use the first that works\");\n        server = null;\n        servers = gatewayCallbacks.server;\n        Janus.debug(servers);\n    } else {\n        if(server.indexOf(\"ws\") === 0) {\n            websockets = true;\n            Janus.log(\"Using WebSockets to contact Janus: \" + server);\n        } else {\n            websockets = false;\n            Janus.log(\"Using REST API to contact Janus: \" + server);\n        }\n    }\n    var iceServers = gatewayCallbacks.iceServers;\n    if(iceServers === undefined || iceServers === null)\n        iceServers = [{urls: \"stun:stun.l.google.com:19302\"}];\n    var iceTransportPolicy = gatewayCallbacks.iceTransportPolicy;\n    var bundlePolicy = gatewayCallbacks.bundlePolicy;\n    // Whether IPv6 candidates should be gathered\n    var ipv6Support = gatewayCallbacks.ipv6;\n    if(ipv6Support === undefined || ipv6Support === null)\n        ipv6Support = false;\n    // Whether we should enable the withCredentials flag for XHR requests\n    var withCredentials = false;\n    if(gatewayCallbacks.withCredentials !== undefined && gatewayCallbacks.withCredentials !== null)\n        withCredentials = gatewayCallbacks.withCredentials === true;\n    // Optional max events\n    var maxev = 10;\n    if(gatewayCallbacks.max_poll_events !== undefined && gatewayCallbacks.max_poll_events !== null)\n        maxev = gatewayCallbacks.max_poll_events;\n    if(maxev < 1)\n        maxev = 1;\n    // Token to use (only if the token based authentication mechanism is enabled)\n    var token = null;\n    if(gatewayCallbacks.token !== undefined && gatewayCallbacks.token !== null)\n        token = gatewayCallbacks.token;\n    // API secret to use (only if the shared API secret is enabled)\n    var apisecret = null;\n    if(gatewayCallbacks.apisecret !== undefined && gatewayCallbacks.apisecret !== null)\n        apisecret = gatewayCallbacks.apisecret;\n    // Whether we should destroy this session when onbeforeunload is called\n    this.destroyOnUnload = true;\n    if(gatewayCallbacks.destroyOnUnload !== undefined && gatewayCallbacks.destroyOnUnload !== null)\n        this.destroyOnUnload = (gatewayCallbacks.destroyOnUnload === true);\n    // Some timeout-related values\n    var keepAlivePeriod = 25000;\n    if(gatewayCallbacks.keepAlivePeriod !== undefined && gatewayCallbacks.keepAlivePeriod !== null)\n        keepAlivePeriod = gatewayCallbacks.keepAlivePeriod;\n    if(isNaN(keepAlivePeriod))\n        keepAlivePeriod = 25000;\n    var longPollTimeout = 60000;\n    if(gatewayCallbacks.longPollTimeout !== undefined && gatewayCallbacks.longPollTimeout !== null)\n        longPollTimeout = gatewayCallbacks.longPollTimeout;\n    if(isNaN(longPollTimeout))\n        longPollTimeout = 60000;\n\n    var connected = false;\n    var sessionId = null;\n    var pluginHandles = {};\n    var that = this;\n    var retries = 0;\n    var transactions = {};\n    createSession(gatewayCallbacks);\n\n    // Public methods\n    this.getServer = function() { return server; };\n    this.isConnected = function() { return connected; };\n    this.reconnect = function(callbacks) {\n        callbacks = callbacks || {};\n        callbacks.success = (typeof callbacks.success == \"function\") ? callbacks.success : Janus.noop;\n        callbacks.error = (typeof callbacks.error == \"function\") ? callbacks.error : Janus.noop;\n        callbacks[\"reconnect\"] = true;\n        createSession(callbacks);\n    };\n    this.getSessionId = function() { return sessionId; };\n    this.destroy = function(callbacks) { destroySession(callbacks); };\n    this.attach = function(callbacks) { createHandle(callbacks); };\n\n    function eventHandler() {\n        if(sessionId == null)\n            return;\n        Janus.debug('Long poll...');\n        if(!connected) {\n            Janus.warn(\"Is the server down? (connected=false)\");\n            return;\n        }\n        var longpoll = server + \"/\" + sessionId + \"?rid=\" + new Date().getTime();\n        if(maxev !== undefined && maxev !== null)\n            longpoll = longpoll + \"&maxev=\" + maxev;\n        if(token !== null && token !== undefined)\n            longpoll = longpoll + \"&token=\" + encodeURIComponent(token);\n        if(apisecret !== null && apisecret !== undefined)\n            longpoll = longpoll + \"&apisecret=\" + encodeURIComponent(apisecret);\n        Janus.httpAPICall(longpoll, {\n            verb: 'GET',\n            withCredentials: withCredentials,\n            success: handleEvent,\n            timeout: longPollTimeout,\n            error: function(textStatus, errorThrown) {\n                Janus.error(textStatus + \":\", errorThrown);\n                retries++;\n                if(retries > 3) {\n                    // Did we just lose the server? :-(\n                    connected = false;\n                    gatewayCallbacks.error(\"Lost connection to the server (is it down?)\");\n                    return;\n                }\n                eventHandler();\n            }\n        });\n    }\n\n    // Private event handler: this will trigger plugin callbacks, if set\n    function handleEvent(json, skipTimeout) {\n        retries = 0;\n        if(!websockets && sessionId !== undefined && sessionId !== null && skipTimeout !== true)\n            eventHandler();\n        if(!websockets && Janus.isArray(json)) {\n            // We got an array: it means we passed a maxev > 1, iterate on all objects\n            for(var i=0; i<json.length; i++) {\n                handleEvent(json[i], true);\n            }\n            return;\n        }\n        if(json[\"janus\"] === \"keepalive\") {\n            // Nothing happened\n            Janus.vdebug(\"Got a keepalive on session \" + sessionId);\n            return;\n        } else if(json[\"janus\"] === \"ack\") {\n            // Just an ack, we can probably ignore\n            Janus.debug(\"Got an ack on session \" + sessionId);\n            Janus.debug(json);\n            var transaction = json[\"transaction\"];\n            if(transaction !== null && transaction !== undefined) {\n                var reportSuccess = transactions[transaction];\n                if(reportSuccess !== null && reportSuccess !== undefined) {\n                    reportSuccess(json);\n                }\n                delete transactions[transaction];\n            }\n            return;\n        } else if(json[\"janus\"] === \"success\") {\n            // Success!\n            Janus.debug(\"Got a success on session \" + sessionId);\n            Janus.debug(json);\n            var transaction = json[\"transaction\"];\n            if(transaction !== null && transaction !== undefined) {\n                var reportSuccess = transactions[transaction];\n                if(reportSuccess !== null && reportSuccess !== undefined) {\n                    reportSuccess(json);\n                }\n                delete transactions[transaction];\n            }\n            return;\n        } else if(json[\"janus\"] === \"trickle\") {\n            // We got a trickle candidate from Janus\n            var sender = json[\"sender\"];\n            if(sender === undefined || sender === null) {\n                Janus.warn(\"Missing sender...\");\n                return;\n            }\n            var pluginHandle = pluginHandles[sender];\n            if(pluginHandle === undefined || pluginHandle === null) {\n                Janus.debug(\"This handle is not attached to this session\");\n                return;\n            }\n            var candidate = json[\"candidate\"];\n            Janus.debug(\"Got a trickled candidate on session \" + sessionId);\n            Janus.debug(candidate);\n            var config = pluginHandle.webrtcStuff;\n            if(config.pc && config.remoteSdp) {\n                // Add candidate right now\n                Janus.debug(\"Adding remote candidate:\", candidate);\n                if(!candidate || candidate.completed === true) {\n                    // end-of-candidates\n                    // config.pc.addIceCandidate({candidate:''});\n                } else {\n                    // New candidate\n                    config.pc.addIceCandidate(candidate);\n                }\n            } else {\n                // We didn't do setRemoteDescription (trickle got here before the offer?)\n                Janus.debug(\"We didn't do setRemoteDescription (trickle got here before the offer?), caching candidate\");\n                if(!config.candidates)\n                    config.candidates = [];\n                config.candidates.push(candidate);\n                Janus.debug(config.candidates);\n            }\n        } else if(json[\"janus\"] === \"webrtcup\") {\n            // The PeerConnection with the server is up! Notify this\n            Janus.debug(\"Got a webrtcup event on session \" + sessionId);\n            Janus.debug(json);\n            var sender = json[\"sender\"];\n            if(sender === undefined || sender === null) {\n                Janus.warn(\"Missing sender...\");\n                return;\n            }\n            var pluginHandle = pluginHandles[sender];\n            if(pluginHandle === undefined || pluginHandle === null) {\n                Janus.debug(\"This handle is not attached to this session\");\n                return;\n            }\n            pluginHandle.webrtcState(true);\n            return;\n        } else if(json[\"janus\"] === \"hangup\") {\n            // A plugin asked the core to hangup a PeerConnection on one of our handles\n            Janus.debug(\"Got a hangup event on session \" + sessionId);\n            Janus.debug(json);\n            var sender = json[\"sender\"];\n            if(sender === undefined || sender === null) {\n                Janus.warn(\"Missing sender...\");\n                return;\n            }\n            var pluginHandle = pluginHandles[sender];\n            if(pluginHandle === undefined || pluginHandle === null) {\n                Janus.debug(\"This handle is not attached to this session\");\n                return;\n            }\n            pluginHandle.webrtcState(false, json[\"reason\"]);\n            pluginHandle.hangup();\n        } else if(json[\"janus\"] === \"detached\") {\n            // A plugin asked the core to detach one of our handles\n            Janus.debug(\"Got a detached event on session \" + sessionId);\n            Janus.debug(json);\n            var sender = json[\"sender\"];\n            if(sender === undefined || sender === null) {\n                Janus.warn(\"Missing sender...\");\n                return;\n            }\n            var pluginHandle = pluginHandles[sender];\n            if(pluginHandle === undefined || pluginHandle === null) {\n                // Don't warn here because destroyHandle causes this situation.\n                return;\n            }\n            pluginHandle.detached = true;\n            pluginHandle.ondetached();\n            pluginHandle.detach();\n        } else if(json[\"janus\"] === \"media\") {\n            // Media started/stopped flowing\n            Janus.debug(\"Got a media event on session \" + sessionId);\n            Janus.debug(json);\n            var sender = json[\"sender\"];\n            if(sender === undefined || sender === null) {\n                Janus.warn(\"Missing sender...\");\n                return;\n            }\n            var pluginHandle = pluginHandles[sender];\n            if(pluginHandle === undefined || pluginHandle === null) {\n                Janus.debug(\"This handle is not attached to this session\");\n                return;\n            }\n            pluginHandle.mediaState(json[\"type\"], json[\"receiving\"]);\n        } else if(json[\"janus\"] === \"slowlink\") {\n            Janus.debug(\"Got a slowlink event on session \" + sessionId);\n            Janus.debug(json);\n            // Trouble uplink or downlink\n            var sender = json[\"sender\"];\n            if(sender === undefined || sender === null) {\n                Janus.warn(\"Missing sender...\");\n                return;\n            }\n            var pluginHandle = pluginHandles[sender];\n            if(pluginHandle === undefined || pluginHandle === null) {\n                Janus.debug(\"This handle is not attached to this session\");\n                return;\n            }\n            pluginHandle.slowLink(json[\"uplink\"], json[\"lost\"]);\n        } else if(json[\"janus\"] === \"error\") {\n            // Oops, something wrong happened\n            Janus.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason);\t// FIXME\n            Janus.debug(json);\n            var transaction = json[\"transaction\"];\n            if(transaction !== null && transaction !== undefined) {\n                var reportSuccess = transactions[transaction];\n                if(reportSuccess !== null && reportSuccess !== undefined) {\n                    reportSuccess(json);\n                }\n                delete transactions[transaction];\n            }\n            return;\n        } else if(json[\"janus\"] === \"event\") {\n            Janus.debug(\"Got a plugin event on session \" + sessionId);\n            Janus.debug(json);\n            var sender = json[\"sender\"];\n            if(sender === undefined || sender === null) {\n                Janus.warn(\"Missing sender...\");\n                return;\n            }\n            var plugindata = json[\"plugindata\"];\n            if(plugindata === undefined || plugindata === null) {\n                Janus.warn(\"Missing plugindata...\");\n                return;\n            }\n            Janus.debug(\"  -- Event is coming from \" + sender + \" (\" + plugindata[\"plugin\"] + \")\");\n            var data = plugindata[\"data\"];\n            Janus.debug(data);\n            var pluginHandle = pluginHandles[sender];\n            if(pluginHandle === undefined || pluginHandle === null) {\n                Janus.warn(\"This handle is not attached to this session\");\n                return;\n            }\n            var jsep = json[\"jsep\"];\n            if(jsep !== undefined && jsep !== null) {\n                Janus.debug(\"Handling SDP as well...\");\n                Janus.debug(jsep);\n            }\n            var callback = pluginHandle.onmessage;\n            if(callback !== null && callback !== undefined) {\n                Janus.debug(\"Notifying application...\");\n                // Send to callback specified when attaching plugin handle\n                callback(data, jsep);\n            } else {\n                // Send to generic callback (?)\n                Janus.debug(\"No provided notification callback\");\n            }\n        } else if(json[\"janus\"] === \"timeout\") {\n            Janus.error(\"Timeout on session \" + sessionId);\n            Janus.debug(json);\n            if (websockets) {\n                ws.close(3504, \"Gateway timeout\");\n            }\n            return;\n        } else {\n            Janus.warn(\"Unknown message/event  '\" + json[\"janus\"] + \"' on session \" + sessionId);\n            Janus.debug(json);\n        }\n    }\n\n    // Private helper to send keep-alive messages on WebSockets\n    function keepAlive() {\n        if(server === null || !websockets || !connected)\n            return;\n        wsKeepaliveTimeoutId = setTimeout(keepAlive, keepAlivePeriod);\n        var request = { \"janus\": \"keepalive\", \"session_id\": sessionId, \"transaction\": Janus.randomString(12) };\n        if(token !== null && token !== undefined)\n            request[\"token\"] = token;\n        if(apisecret !== null && apisecret !== undefined)\n            request[\"apisecret\"] = apisecret;\n        ws.send(JSON.stringify(request));\n    }\n\n    // Private method to create a session\n    function createSession(callbacks) {\n        var transaction = Janus.randomString(12);\n        var request = { \"janus\": \"create\", \"transaction\": transaction };\n        if(callbacks[\"reconnect\"]) {\n            // We're reconnecting, claim the session\n            connected = false;\n            request[\"janus\"] = \"claim\";\n            request[\"session_id\"] = sessionId;\n            // If we were using websockets, ignore the old connection\n            if(ws) {\n                ws.onopen = null;\n                ws.onerror = null;\n                ws.onclose = null;\n                if(wsKeepaliveTimeoutId) {\n                    clearTimeout(wsKeepaliveTimeoutId);\n                    wsKeepaliveTimeoutId = null;\n                }\n            }\n        }\n        if(token !== null && token !== undefined)\n            request[\"token\"] = token;\n        if(apisecret !== null && apisecret !== undefined)\n            request[\"apisecret\"] = apisecret;\n        if(server === null && Janus.isArray(servers)) {\n            // We still need to find a working server from the list we were given\n            server = servers[serversIndex];\n            if(server.indexOf(\"ws\") === 0) {\n                websockets = true;\n                Janus.log(\"Server #\" + (serversIndex+1) + \": trying WebSockets to contact Janus (\" + server + \")\");\n            } else {\n                websockets = false;\n                Janus.log(\"Server #\" + (serversIndex+1) + \": trying REST API to contact Janus (\" + server + \")\");\n            }\n        }\n        if(websockets) {\n            ws = Janus.newWebSocket(server, 'janus-protocol');\n            wsHandlers = {\n                'error': function() {\n                    Janus.error(\"Error connecting to the Janus WebSockets server... \" + server);\n                    if (Janus.isArray(servers) && !callbacks[\"reconnect\"]) {\n                        serversIndex++;\n                        if (serversIndex == servers.length) {\n                            // We tried all the servers the user gave us and they all failed\n                            callbacks.error(\"Error connecting to any of the provided Janus servers: Is the server down?\");\n                            return;\n                        }\n                        // Let's try the next server\n                        server = null;\n                        setTimeout(function() {\n                            createSession(callbacks);\n                        }, 200);\n                        return;\n                    }\n                    callbacks.error(\"Error connecting to the Janus WebSockets server: Is the server down?\");\n                },\n\n                'open': function() {\n                    // We need to be notified about the success\n                    transactions[transaction] = function(json) {\n                        Janus.debug(json);\n                        if (json[\"janus\"] !== \"success\") {\n                            Janus.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason);\t// FIXME\n                            callbacks.error(json[\"error\"].reason);\n                            return;\n                        }\n                        wsKeepaliveTimeoutId = setTimeout(keepAlive, keepAlivePeriod);\n                        connected = true;\n                        sessionId = json[\"session_id\"] ? json[\"session_id\"] : json.data[\"id\"];\n                        if(callbacks[\"reconnect\"]) {\n                            Janus.log(\"Claimed session: \" + sessionId);\n                        } else {\n                            Janus.log(\"Created session: \" + sessionId);\n                        }\n                        Janus.sessions[sessionId] = that;\n                        callbacks.success();\n                    };\n                    ws.send(JSON.stringify(request));\n                },\n\n                'message': function(event) {\n                    handleEvent(JSON.parse(event.data));\n                },\n\n                'close': function() {\n                    if (server === null || !connected) {\n                        return;\n                    }\n                    connected = false;\n                    // FIXME What if this is called when the page is closed?\n                    gatewayCallbacks.error(\"Lost connection to the server (is it down?)\");\n                }\n            };\n\n            for(var eventName in wsHandlers) {\n                ws.addEventListener(eventName, wsHandlers[eventName]);\n            }\n\n            return;\n        }\n        Janus.httpAPICall(server, {\n            verb: 'POST',\n            withCredentials: withCredentials,\n            body: request,\n            success: function(json) {\n                Janus.debug(json);\n                if(json[\"janus\"] !== \"success\") {\n                    Janus.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason);\t// FIXME\n                    callbacks.error(json[\"error\"].reason);\n                    return;\n                }\n                connected = true;\n                sessionId = json[\"session_id\"] ? json[\"session_id\"] : json.data[\"id\"];\n                if(callbacks[\"reconnect\"]) {\n                    Janus.log(\"Claimed session: \" + sessionId);\n                } else {\n                    Janus.log(\"Created session: \" + sessionId);\n                }\n                Janus.sessions[sessionId] = that;\n                eventHandler();\n                callbacks.success();\n            },\n            error: function(textStatus, errorThrown) {\n                Janus.error(textStatus + \":\", errorThrown);\t// FIXME\n                if(Janus.isArray(servers) && !callbacks[\"reconnect\"]) {\n                    serversIndex++;\n                    if(serversIndex == servers.length) {\n                        // We tried all the servers the user gave us and they all failed\n                        callbacks.error(\"Error connecting to any of the provided Janus servers: Is the server down?\");\n                        return;\n                    }\n                    // Let's try the next server\n                    server = null;\n                    setTimeout(function() { createSession(callbacks); }, 200);\n                    return;\n                }\n                if(errorThrown === \"\")\n                    callbacks.error(textStatus + \": Is the server down?\");\n                else\n                    callbacks.error(textStatus + \": \" + errorThrown);\n            }\n        });\n    }\n\n    // Private method to destroy a session\n    function destroySession(callbacks) {\n        callbacks = callbacks || {};\n        // FIXME This method triggers a success even when we fail\n        callbacks.success = (typeof callbacks.success == \"function\") ? callbacks.success : Janus.noop;\n        var asyncRequest = true;\n        if(callbacks.asyncRequest !== undefined && callbacks.asyncRequest !== null)\n            asyncRequest = (callbacks.asyncRequest === true);\n        var notifyDestroyed = true;\n        if(callbacks.notifyDestroyed !== undefined && callbacks.notifyDestroyed !== null)\n            notifyDestroyed = (callbacks.notifyDestroyed === true);\n        var cleanupHandles = false;\n        if(callbacks.cleanupHandles !== undefined && callbacks.cleanupHandles !== null)\n            cleanupHandles = (callbacks.cleanupHandles === true);\n        Janus.log(\"Destroying session \" + sessionId + \" (async=\" + asyncRequest + \")\");\n        if(!connected) {\n            Janus.warn(\"Is the server down? (connected=false)\");\n            callbacks.success();\n            return;\n        }\n        if(sessionId === undefined || sessionId === null) {\n            Janus.warn(\"No session to destroy\");\n            callbacks.success();\n            if(notifyDestroyed)\n                gatewayCallbacks.destroyed();\n            return;\n        }\n        if(cleanupHandles) {\n            for(var handleId in pluginHandles)\n                destroyHandle(handleId, { noRequest: true });\n        }\n        // No need to destroy all handles first, Janus will do that itself\n        var request = { \"janus\": \"destroy\", \"transaction\": Janus.randomString(12) };\n        if(token !== null && token !== undefined)\n            request[\"token\"] = token;\n        if(apisecret !== null && apisecret !== undefined)\n            request[\"apisecret\"] = apisecret;\n        if(websockets) {\n            request[\"session_id\"] = sessionId;\n\n            var unbindWebSocket = function() {\n                for(var eventName in wsHandlers) {\n                    ws.removeEventListener(eventName, wsHandlers[eventName]);\n                }\n                ws.removeEventListener('message', onUnbindMessage);\n                ws.removeEventListener('error', onUnbindError);\n                if(wsKeepaliveTimeoutId) {\n                    clearTimeout(wsKeepaliveTimeoutId);\n                }\n                ws.close();\n            };\n\n            var onUnbindMessage = function(event){\n                var data = JSON.parse(event.data);\n                if(data.session_id == request.session_id && data.transaction == request.transaction) {\n                    unbindWebSocket();\n                    callbacks.success();\n                    if(notifyDestroyed)\n                        gatewayCallbacks.destroyed();\n                }\n            };\n            var onUnbindError = function(event) {\n                unbindWebSocket();\n                callbacks.error(\"Failed to destroy the server: Is the server down?\");\n                if(notifyDestroyed)\n                    gatewayCallbacks.destroyed();\n            };\n\n            ws.addEventListener('message', onUnbindMessage);\n            ws.addEventListener('error', onUnbindError);\n\n            ws.send(JSON.stringify(request));\n            return;\n        }\n        Janus.httpAPICall(server + \"/\" + sessionId, {\n            verb: 'POST',\n            async: asyncRequest,\t// Sometimes we need false here, or destroying in onbeforeunload won't work\n            withCredentials: withCredentials,\n            body: request,\n            success: function(json) {\n                Janus.log(\"Destroyed session:\");\n                Janus.debug(json);\n                sessionId = null;\n                connected = false;\n                if(json[\"janus\"] !== \"success\") {\n                    Janus.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason);\t// FIXME\n                }\n                callbacks.success();\n                if(notifyDestroyed)\n                    gatewayCallbacks.destroyed();\n            },\n            error: function(textStatus, errorThrown) {\n                Janus.error(textStatus + \":\", errorThrown);\t// FIXME\n                // Reset everything anyway\n                sessionId = null;\n                connected = false;\n                callbacks.success();\n                if(notifyDestroyed)\n                    gatewayCallbacks.destroyed();\n            }\n        });\n    }\n\n    // Private method to create a plugin handle\n    function createHandle(callbacks) {\n        callbacks = callbacks || {};\n        callbacks.success = (typeof callbacks.success == \"function\") ? callbacks.success : Janus.noop;\n        callbacks.error = (typeof callbacks.error == \"function\") ? callbacks.error : Janus.noop;\n        callbacks.consentDialog = (typeof callbacks.consentDialog == \"function\") ? callbacks.consentDialog : Janus.noop;\n        callbacks.iceState = (typeof callbacks.iceState == \"function\") ? callbacks.iceState : Janus.noop;\n        callbacks.mediaState = (typeof callbacks.mediaState == \"function\") ? callbacks.mediaState : Janus.noop;\n        callbacks.webrtcState = (typeof callbacks.webrtcState == \"function\") ? callbacks.webrtcState : Janus.noop;\n        callbacks.slowLink = (typeof callbacks.slowLink == \"function\") ? callbacks.slowLink : Janus.noop;\n        callbacks.onmessage = (typeof callbacks.onmessage == \"function\") ? callbacks.onmessage : Janus.noop;\n        callbacks.onlocalstream = (typeof callbacks.onlocalstream == \"function\") ? callbacks.onlocalstream : Janus.noop;\n        callbacks.onremotestream = (typeof callbacks.onremotestream == \"function\") ? callbacks.onremotestream : Janus.noop;\n        callbacks.ondata = (typeof callbacks.ondata == \"function\") ? callbacks.ondata : Janus.noop;\n        callbacks.ondataopen = (typeof callbacks.ondataopen == \"function\") ? callbacks.ondataopen : Janus.noop;\n        callbacks.oncleanup = (typeof callbacks.oncleanup == \"function\") ? callbacks.oncleanup : Janus.noop;\n        callbacks.ondetached = (typeof callbacks.ondetached == \"function\") ? callbacks.ondetached : Janus.noop;\n        if(!connected) {\n            Janus.warn(\"Is the server down? (connected=false)\");\n            callbacks.error(\"Is the server down? (connected=false)\");\n            return;\n        }\n        var plugin = callbacks.plugin;\n        if(plugin === undefined || plugin === null) {\n            Janus.error(\"Invalid plugin\");\n            callbacks.error(\"Invalid plugin\");\n            return;\n        }\n        var opaqueId = callbacks.opaqueId;\n        var handleToken = callbacks.token ? callbacks.token : token;\n        var transaction = Janus.randomString(12);\n        var request = { \"janus\": \"attach\", \"plugin\": plugin, \"opaque_id\": opaqueId, \"transaction\": transaction };\n        if(handleToken !== null && handleToken !== undefined)\n            request[\"token\"] = handleToken;\n        if(apisecret !== null && apisecret !== undefined)\n            request[\"apisecret\"] = apisecret;\n        if(websockets) {\n            transactions[transaction] = function(json) {\n                Janus.debug(json);\n                if(json[\"janus\"] !== \"success\") {\n                    Janus.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason);\t// FIXME\n                    callbacks.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason);\n                    return;\n                }\n                var handleId = json.data[\"id\"];\n                Janus.log(\"Created handle: \" + handleId);\n                var pluginHandle =\n                    {\n                        session : that,\n                        plugin : plugin,\n                        id : handleId,\n                        token : handleToken,\n                        detached : false,\n                        webrtcStuff : {\n                            started : false,\n                            myStream : null,\n                            streamExternal : false,\n                            remoteStream : null,\n                            mySdp : null,\n                            mediaConstraints : null,\n                            pc : null,\n                            dataChannel : {},\n                            dtmfSender : null,\n                            trickle : true,\n                            iceDone : false,\n                            volume : {\n                                value : null,\n                                timer : null\n                            },\n                            bitrate : {\n                                value : null,\n                                bsnow : null,\n                                bsbefore : null,\n                                tsnow : null,\n                                tsbefore : null,\n                                timer : null\n                            }\n                        },\n                        getId : function() { return handleId; },\n                        getPlugin : function() { return plugin; },\n                        getVolume : function() { return getVolume(handleId, true); },\n                        getRemoteVolume : function() { return getVolume(handleId, true); },\n                        getLocalVolume : function() { return getVolume(handleId, false); },\n                        isAudioMuted : function() { return isMuted(handleId, false); },\n                        muteAudio : function() { return mute(handleId, false, true); },\n                        unmuteAudio : function() { return mute(handleId, false, false); },\n                        isVideoMuted : function() { return isMuted(handleId, true); },\n                        muteVideo : function() { return mute(handleId, true, true); },\n                        unmuteVideo : function() { return mute(handleId, true, false); },\n                        getBitrate : function() { return getBitrate(handleId); },\n                        send : function(callbacks) { sendMessage(handleId, callbacks); },\n                        data : function(callbacks) { sendData(handleId, callbacks); },\n                        dtmf : function(callbacks) { sendDtmf(handleId, callbacks); },\n                        consentDialog : callbacks.consentDialog,\n                        iceState : callbacks.iceState,\n                        mediaState : callbacks.mediaState,\n                        webrtcState : callbacks.webrtcState,\n                        slowLink : callbacks.slowLink,\n                        onmessage : callbacks.onmessage,\n                        createOffer : function(callbacks) { prepareWebrtc(handleId, true, callbacks); },\n                        createAnswer : function(callbacks) { prepareWebrtc(handleId, false, callbacks); },\n                        handleRemoteJsep : function(callbacks) { prepareWebrtcPeer(handleId, callbacks); },\n                        onlocalstream : callbacks.onlocalstream,\n                        onremotestream : callbacks.onremotestream,\n                        ondata : callbacks.ondata,\n                        ondataopen : callbacks.ondataopen,\n                        oncleanup : callbacks.oncleanup,\n                        ondetached : callbacks.ondetached,\n                        hangup : function(sendRequest) { cleanupWebrtc(handleId, sendRequest === true); },\n                        detach : function(callbacks) { destroyHandle(handleId, callbacks); }\n                    }\n                pluginHandles[handleId] = pluginHandle;\n                callbacks.success(pluginHandle);\n            };\n            request[\"session_id\"] = sessionId;\n            ws.send(JSON.stringify(request));\n            return;\n        }\n        Janus.httpAPICall(server + \"/\" + sessionId, {\n            verb: 'POST',\n            withCredentials: withCredentials,\n            body: request,\n            success: function(json) {\n                Janus.debug(json);\n                if(json[\"janus\"] !== \"success\") {\n                    Janus.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason);\t// FIXME\n                    callbacks.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason);\n                    return;\n                }\n                var handleId = json.data[\"id\"];\n                Janus.log(\"Created handle: \" + handleId);\n                var pluginHandle =\n                    {\n                        session : that,\n                        plugin : plugin,\n                        id : handleId,\n                        token : handleToken,\n                        detached : false,\n                        webrtcStuff : {\n                            started : false,\n                            myStream : null,\n                            streamExternal : false,\n                            remoteStream : null,\n                            mySdp : null,\n                            mediaConstraints : null,\n                            pc : null,\n                            dataChannel : {},\n                            dtmfSender : null,\n                            trickle : true,\n                            iceDone : false,\n                            volume : {\n                                value : null,\n                                timer : null\n                            },\n                            bitrate : {\n                                value : null,\n                                bsnow : null,\n                                bsbefore : null,\n                                tsnow : null,\n                                tsbefore : null,\n                                timer : null\n                            }\n                        },\n                        getId : function() { return handleId; },\n                        getPlugin : function() { return plugin; },\n                        getVolume : function() { return getVolume(handleId, true); },\n                        getRemoteVolume : function() { return getVolume(handleId, true); },\n                        getLocalVolume : function() { return getVolume(handleId, false); },\n                        isAudioMuted : function() { return isMuted(handleId, false); },\n                        muteAudio : function() { return mute(handleId, false, true); },\n                        unmuteAudio : function() { return mute(handleId, false, false); },\n                        isVideoMuted : function() { return isMuted(handleId, true); },\n                        muteVideo : function() { return mute(handleId, true, true); },\n                        unmuteVideo : function() { return mute(handleId, true, false); },\n                        getBitrate : function() { return getBitrate(handleId); },\n                        send : function(callbacks) { sendMessage(handleId, callbacks); },\n                        data : function(callbacks) { sendData(handleId, callbacks); },\n                        dtmf : function(callbacks) { sendDtmf(handleId, callbacks); },\n                        consentDialog : callbacks.consentDialog,\n                        iceState : callbacks.iceState,\n                        mediaState : callbacks.mediaState,\n                        webrtcState : callbacks.webrtcState,\n                        slowLink : callbacks.slowLink,\n                        onmessage : callbacks.onmessage,\n                        createOffer : function(callbacks) { prepareWebrtc(handleId, true, callbacks); },\n                        createAnswer : function(callbacks) { prepareWebrtc(handleId, false, callbacks); },\n                        handleRemoteJsep : function(callbacks) { prepareWebrtcPeer(handleId, callbacks); },\n                        onlocalstream : callbacks.onlocalstream,\n                        onremotestream : callbacks.onremotestream,\n                        ondata : callbacks.ondata,\n                        ondataopen : callbacks.ondataopen,\n                        oncleanup : callbacks.oncleanup,\n                        ondetached : callbacks.ondetached,\n                        hangup : function(sendRequest) { cleanupWebrtc(handleId, sendRequest === true); },\n                        detach : function(callbacks) { destroyHandle(handleId, callbacks); }\n                    }\n                pluginHandles[handleId] = pluginHandle;\n                callbacks.success(pluginHandle);\n            },\n            error: function(textStatus, errorThrown) {\n                Janus.error(textStatus + \":\", errorThrown);\t// FIXME\n            }\n        });\n    }\n\n    // Private method to send a message\n    function sendMessage(handleId, callbacks) {\n        callbacks = callbacks || {};\n        callbacks.success = (typeof callbacks.success == \"function\") ? callbacks.success : Janus.noop;\n        callbacks.error = (typeof callbacks.error == \"function\") ? callbacks.error : Janus.noop;\n        if(!connected) {\n            Janus.warn(\"Is the server down? (connected=false)\");\n            callbacks.error(\"Is the server down? (connected=false)\");\n            return;\n        }\n        var pluginHandle = pluginHandles[handleId];\n        if(pluginHandle === null || pluginHandle === undefined ||\n            pluginHandle.webrtcStuff === null || pluginHandle.webrtcStuff === undefined) {\n            Janus.warn(\"Invalid handle\");\n            callbacks.error(\"Invalid handle\");\n            return;\n        }\n        var message = callbacks.message;\n        var jsep = callbacks.jsep;\n        var transaction = Janus.randomString(12);\n        var request = { \"janus\": \"message\", \"body\": message, \"transaction\": transaction };\n        if(pluginHandle.token !== null && pluginHandle.token !== undefined)\n            request[\"token\"] = pluginHandle.token;\n        if(apisecret !== null && apisecret !== undefined)\n            request[\"apisecret\"] = apisecret;\n        if(jsep !== null && jsep !== undefined)\n            request.jsep = jsep;\n        Janus.debug(\"Sending message to plugin (handle=\" + handleId + \"):\");\n        Janus.debug(request);\n        if(websockets) {\n            request[\"session_id\"] = sessionId;\n            request[\"handle_id\"] = handleId;\n            transactions[transaction] = function(json) {\n                Janus.debug(\"Message sent!\");\n                Janus.debug(json);\n                if(json[\"janus\"] === \"success\") {\n                    // We got a success, must have been a synchronous transaction\n                    var plugindata = json[\"plugindata\"];\n                    if(plugindata === undefined || plugindata === null) {\n                        Janus.warn(\"Request succeeded, but missing plugindata...\");\n                        callbacks.success();\n                        return;\n                    }\n                    Janus.log(\"Synchronous transaction successful (\" + plugindata[\"plugin\"] + \")\");\n                    var data = plugindata[\"data\"];\n                    Janus.debug(data);\n                    callbacks.success(data);\n                    return;\n                } else if(json[\"janus\"] !== \"ack\") {\n                    // Not a success and not an ack, must be an error\n                    if(json[\"error\"] !== undefined && json[\"error\"] !== null) {\n                        Janus.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason);\t// FIXME\n                        callbacks.error(json[\"error\"].code + \" \" + json[\"error\"].reason);\n                    } else {\n                        Janus.error(\"Unknown error\");\t// FIXME\n                        callbacks.error(\"Unknown error\");\n                    }\n                    return;\n                }\n                // If we got here, the plugin decided to handle the request asynchronously\n                callbacks.success();\n            };\n            ws.send(JSON.stringify(request));\n            return;\n        }\n        Janus.httpAPICall(server + \"/\" + sessionId + \"/\" + handleId, {\n            verb: 'POST',\n            withCredentials: withCredentials,\n            body: request,\n            success: function(json) {\n                Janus.debug(\"Message sent!\");\n                Janus.debug(json);\n                if(json[\"janus\"] === \"success\") {\n                    // We got a success, must have been a synchronous transaction\n                    var plugindata = json[\"plugindata\"];\n                    if(plugindata === undefined || plugindata === null) {\n                        Janus.warn(\"Request succeeded, but missing plugindata...\");\n                        callbacks.success();\n                        return;\n                    }\n                    Janus.log(\"Synchronous transaction successful (\" + plugindata[\"plugin\"] + \")\");\n                    var data = plugindata[\"data\"];\n                    Janus.debug(data);\n                    callbacks.success(data);\n                    return;\n                } else if(json[\"janus\"] !== \"ack\") {\n                    // Not a success and not an ack, must be an error\n                    if(json[\"error\"] !== undefined && json[\"error\"] !== null) {\n                        Janus.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason);\t// FIXME\n                        callbacks.error(json[\"error\"].code + \" \" + json[\"error\"].reason);\n                    } else {\n                        Janus.error(\"Unknown error\");\t// FIXME\n                        callbacks.error(\"Unknown error\");\n                    }\n                    return;\n                }\n                // If we got here, the plugin decided to handle the request asynchronously\n                callbacks.success();\n            },\n            error: function(textStatus, errorThrown) {\n                Janus.error(textStatus + \":\", errorThrown);\t// FIXME\n                callbacks.error(textStatus + \": \" + errorThrown);\n            }\n        });\n    }\n\n    // Private method to send a trickle candidate\n    function sendTrickleCandidate(handleId, candidate) {\n        if(!connected) {\n            Janus.warn(\"Is the server down? (connected=false)\");\n            return;\n        }\n        var pluginHandle = pluginHandles[handleId];\n        if(pluginHandle === null || pluginHandle === undefined ||\n            pluginHandle.webrtcStuff === null || pluginHandle.webrtcStuff === undefined) {\n            Janus.warn(\"Invalid handle\");\n            return;\n        }\n        var request = { \"janus\": \"trickle\", \"candidate\": candidate, \"transaction\": Janus.randomString(12) };\n        if(pluginHandle.token !== null && pluginHandle.token !== undefined)\n            request[\"token\"] = pluginHandle.token;\n        if(apisecret !== null && apisecret !== undefined)\n            request[\"apisecret\"] = apisecret;\n        Janus.vdebug(\"Sending trickle candidate (handle=\" + handleId + \"):\");\n        Janus.vdebug(request);\n        if(websockets) {\n            request[\"session_id\"] = sessionId;\n            request[\"handle_id\"] = handleId;\n            ws.send(JSON.stringify(request));\n            return;\n        }\n        Janus.httpAPICall(server + \"/\" + sessionId + \"/\" + handleId, {\n            verb: 'POST',\n            withCredentials: withCredentials,\n            body: request,\n            success: function(json) {\n                Janus.vdebug(\"Candidate sent!\");\n                Janus.vdebug(json);\n                if(json[\"janus\"] !== \"ack\") {\n                    Janus.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason);\t// FIXME\n                    return;\n                }\n            },\n            error: function(textStatus, errorThrown) {\n                Janus.error(textStatus + \":\", errorThrown);\t// FIXME\n            }\n        });\n    }\n\n    // Private method to create a data channel\n    function createDataChannel(handleId, dclabel, incoming, pendingText) {\n        var pluginHandle = pluginHandles[handleId];\n        if(pluginHandle === null || pluginHandle === undefined ||\n            pluginHandle.webrtcStuff === null || pluginHandle.webrtcStuff === undefined) {\n            Janus.warn(\"Invalid handle\");\n            return;\n        }\n        var config = pluginHandle.webrtcStuff;\n        var onDataChannelMessage = function(event) {\n            Janus.log('Received message on data channel:', event);\n            var label = event.target.label;\n            pluginHandle.ondata(event.data, label);\n        }\n        var onDataChannelStateChange = function(event) {\n            Janus.log('Received state change on data channel:', event);\n            var label = event.target.label;\n            var dcState = config.dataChannel[label] ? config.dataChannel[label].readyState : \"null\";\n            Janus.log('State change on <' + label + '> data channel: ' + dcState);\n            if(dcState === 'open') {\n                // Any pending messages to send?\n                if(config.dataChannel[label].pending && config.dataChannel[label].pending.length > 0) {\n                    Janus.log(\"Sending pending messages on <' + label + '>:\", config.dataChannel[label].pending.length);\n                    for(var i in config.dataChannel[label].pending) {\n                        var text = config.dataChannel[label].pending[i];\n                        Janus.log(\"Sending string on data channel <\" + label + \">: \" + text);\n                        config.dataChannel[label].send(text);\n                    }\n                    config.dataChannel[label].pending = [];\n                }\n                // Notify the open data channel\n                pluginHandle.ondataopen(label);\n            }\n        }\n        var onDataChannelError = function(error) {\n            Janus.error('Got error on data channel:', error);\n            // TODO\n        }\n        if(!incoming) {\n            // FIXME Add options (ordered, maxRetransmits, etc.)\n            config.dataChannel[dclabel] = config.pc.createDataChannel(dclabel, {ordered:false});\n        } else {\n            // The channel was created by Janus\n            config.dataChannel[dclabel] = incoming;\n        }\n        config.dataChannel[dclabel].onmessage = onDataChannelMessage;\n        config.dataChannel[dclabel].onopen = onDataChannelStateChange;\n        config.dataChannel[dclabel].onclose = onDataChannelStateChange;\n        config.dataChannel[dclabel].onerror = onDataChannelError;\n        config.dataChannel[dclabel].pending = [];\n        if(pendingText)\n            config.dataChannel[dclabel].pending.push(pendingText);\n    }\n\n    // Private method to send a data channel message\n    function sendData(handleId, callbacks) {\n        callbacks = callbacks || {};\n        callbacks.success = (typeof callbacks.success == \"function\") ? callbacks.success : Janus.noop;\n        callbacks.error = (typeof callbacks.error == \"function\") ? callbacks.error : Janus.noop;\n        var pluginHandle = pluginHandles[handleId];\n        if(pluginHandle === null || pluginHandle === undefined ||\n            pluginHandle.webrtcStuff === null || pluginHandle.webrtcStuff === undefined) {\n            Janus.warn(\"Invalid handle\");\n            callbacks.error(\"Invalid handle\");\n            return;\n        }\n        var config = pluginHandle.webrtcStuff;\n        var text = callbacks.text;\n        if(text === null || text === undefined) {\n            Janus.warn(\"Invalid text\");\n            callbacks.error(\"Invalid text\");\n            return;\n        }\n        var label = callbacks.label ? callbacks.label : Janus.dataChanDefaultLabel;\n        if(!config.dataChannel[label]) {\n            // Create new data channel and wait for it to open\n            createDataChannel(handleId, label, false, text);\n            callbacks.success();\n            return;\n        }\n        if(config.dataChannel[label].readyState !== \"open\") {\n            config.dataChannel[label].pending.push(text);\n            callbacks.success();\n            return;\n        }\n        Janus.log(\"Sending string on data channel <\" + label + \">: \" + text);\n        config.dataChannel[label].send(text);\n        callbacks.success();\n    }\n\n    // Private method to send a DTMF tone\n    function sendDtmf(handleId, callbacks) {\n        callbacks = callbacks || {};\n        callbacks.success = (typeof callbacks.success == \"function\") ? callbacks.success : Janus.noop;\n        callbacks.error = (typeof callbacks.error == \"function\") ? callbacks.error : Janus.noop;\n        var pluginHandle = pluginHandles[handleId];\n        if(pluginHandle === null || pluginHandle === undefined ||\n            pluginHandle.webrtcStuff === null || pluginHandle.webrtcStuff === undefined) {\n            Janus.warn(\"Invalid handle\");\n            callbacks.error(\"Invalid handle\");\n            return;\n        }\n        var config = pluginHandle.webrtcStuff;\n        if(config.dtmfSender === null || config.dtmfSender === undefined) {\n            // Create the DTMF sender the proper way, if possible\n            if(config.pc !== undefined && config.pc !== null) {\n                var senders = config.pc.getSenders();\n                var audioSender = senders.find(function(sender) {\n                    return sender.track && sender.track.kind === 'audio';\n                });\n                if(!audioSender) {\n                    Janus.warn(\"Invalid DTMF configuration (no audio track)\");\n                    callbacks.error(\"Invalid DTMF configuration (no audio track)\");\n                    return;\n                }\n                config.dtmfSender = audioSender.dtmf;\n                if(config.dtmfSender) {\n                    Janus.log(\"Created DTMF Sender\");\n                    config.dtmfSender.ontonechange = function(tone) { Janus.debug(\"Sent DTMF tone: \" + tone.tone); };\n                }\n            }\n            if(config.dtmfSender === null || config.dtmfSender === undefined) {\n                Janus.warn(\"Invalid DTMF configuration\");\n                callbacks.error(\"Invalid DTMF configuration\");\n                return;\n            }\n        }\n        var dtmf = callbacks.dtmf;\n        if(dtmf === null || dtmf === undefined) {\n            Janus.warn(\"Invalid DTMF parameters\");\n            callbacks.error(\"Invalid DTMF parameters\");\n            return;\n        }\n        var tones = dtmf.tones;\n        if(tones === null || tones === undefined) {\n            Janus.warn(\"Invalid DTMF string\");\n            callbacks.error(\"Invalid DTMF string\");\n            return;\n        }\n        var duration = dtmf.duration;\n        if(duration === null || duration === undefined)\n            duration = 500;\t// We choose 500ms as the default duration for a tone\n        var gap = dtmf.gap;\n        if(gap === null || gap === undefined)\n            gap = 50;\t// We choose 50ms as the default gap between tones\n        Janus.debug(\"Sending DTMF string \" + tones + \" (duration \" + duration + \"ms, gap \" + gap + \"ms)\");\n        config.dtmfSender.insertDTMF(tones, duration, gap);\n        callbacks.success();\n    }\n\n    // Private method to destroy a plugin handle\n    function destroyHandle(handleId, callbacks) {\n        callbacks = callbacks || {};\n        callbacks.success = (typeof callbacks.success == \"function\") ? callbacks.success : Janus.noop;\n        callbacks.error = (typeof callbacks.error == \"function\") ? callbacks.error : Janus.noop;\n        var asyncRequest = true;\n        if(callbacks.asyncRequest !== undefined && callbacks.asyncRequest !== null)\n            asyncRequest = (callbacks.asyncRequest === true);\n        var noRequest = true;\n        if(callbacks.noRequest !== undefined && callbacks.noRequest !== null)\n            noRequest = (callbacks.noRequest === true);\n        Janus.log(\"Destroying handle \" + handleId + \" (async=\" + asyncRequest + \")\");\n        cleanupWebrtc(handleId);\n        var pluginHandle = pluginHandles[handleId];\n        if(pluginHandle === null || pluginHandle === undefined || pluginHandle.detached) {\n            // Plugin was already detached by Janus, calling detach again will return a handle not found error, so just exit here\n            delete pluginHandles[handleId];\n            callbacks.success();\n            return;\n        }\n        if(noRequest) {\n            // We're only removing the handle locally\n            delete pluginHandles[handleId];\n            callbacks.success();\n            return;\n        }\n        if(!connected) {\n            Janus.warn(\"Is the server down? (connected=false)\");\n            callbacks.error(\"Is the server down? (connected=false)\");\n            return;\n        }\n        var request = { \"janus\": \"detach\", \"transaction\": Janus.randomString(12) };\n        if(pluginHandle.token !== null && pluginHandle.token !== undefined)\n            request[\"token\"] = pluginHandle.token;\n        if(apisecret !== null && apisecret !== undefined)\n            request[\"apisecret\"] = apisecret;\n        if(websockets) {\n            request[\"session_id\"] = sessionId;\n            request[\"handle_id\"] = handleId;\n            ws.send(JSON.stringify(request));\n            delete pluginHandles[handleId];\n            callbacks.success();\n            return;\n        }\n        Janus.httpAPICall(server + \"/\" + sessionId + \"/\" + handleId, {\n            verb: 'POST',\n            async: asyncRequest,\t// Sometimes we need false here, or destroying in onbeforeunload won't work\n            withCredentials: withCredentials,\n            body: request,\n            success: function(json) {\n                Janus.log(\"Destroyed handle:\");\n                Janus.debug(json);\n                if(json[\"janus\"] !== \"success\") {\n                    Janus.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason);\t// FIXME\n                }\n                delete pluginHandles[handleId];\n                callbacks.success();\n            },\n            error: function(textStatus, errorThrown) {\n                Janus.error(textStatus + \":\", errorThrown);\t// FIXME\n                // We cleanup anyway\n                delete pluginHandles[handleId];\n                callbacks.success();\n            }\n        });\n    }\n\n    // WebRTC stuff\n    function streamsDone(handleId, jsep, media, callbacks, stream) {\n        var pluginHandle = pluginHandles[handleId];\n        if(pluginHandle === null || pluginHandle === undefined ||\n            pluginHandle.webrtcStuff === null || pluginHandle.webrtcStuff === undefined) {\n            Janus.warn(\"Invalid handle\");\n            callbacks.error(\"Invalid handle\");\n            return;\n        }\n        var config = pluginHandle.webrtcStuff;\n        Janus.debug(\"streamsDone:\", stream);\n        if(stream) {\n            Janus.debug(\"  -- Audio tracks:\", stream.getAudioTracks());\n            Janus.debug(\"  -- Video tracks:\", stream.getVideoTracks());\n        }\n        // We're now capturing the new stream: check if we're updating or if it's a new thing\n        var addTracks = false;\n        if(!config.myStream || !media.update || config.streamExternal) {\n            config.myStream = stream;\n            addTracks = true;\n        } else {\n            // We only need to update the existing stream\n            if(((!media.update && isAudioSendEnabled(media)) || (media.update && (media.addAudio || media.replaceAudio))) &&\n                stream.getAudioTracks() && stream.getAudioTracks().length) {\n                config.myStream.addTrack(stream.getAudioTracks()[0]);\n                if(Janus.unifiedPlan) {\n                    // Use Transceivers\n                    Janus.log((media.replaceAudio ? \"Replacing\" : \"Adding\") + \" audio track:\", stream.getAudioTracks()[0]);\n                    var audioTransceiver = null;\n                    var transceivers = config.pc.getTransceivers();\n                    if(transceivers && transceivers.length > 0) {\n                        for(var i in transceivers) {\n                            var t = transceivers[i];\n                            if((t.sender && t.sender.track && t.sender.track.kind === \"audio\") ||\n                                (t.receiver && t.receiver.track && t.receiver.track.kind === \"audio\")) {\n                                audioTransceiver = t;\n                                break;\n                            }\n                        }\n                    }\n                    if(audioTransceiver && audioTransceiver.sender) {\n                        audioTransceiver.sender.replaceTrack(stream.getAudioTracks()[0]);\n                    } else {\n                        config.pc.addTrack(stream.getAudioTracks()[0], stream);\n                    }\n                } else {\n                    Janus.log((media.replaceAudio ? \"Replacing\" : \"Adding\") + \" audio track:\", stream.getAudioTracks()[0]);\n                    config.pc.addTrack(stream.getAudioTracks()[0], stream);\n                }\n            }\n            if(((!media.update && isVideoSendEnabled(media)) || (media.update && (media.addVideo || media.replaceVideo))) &&\n                stream.getVideoTracks() && stream.getVideoTracks().length) {\n                config.myStream.addTrack(stream.getVideoTracks()[0]);\n                if(Janus.unifiedPlan) {\n                    // Use Transceivers\n                    Janus.log((media.replaceVideo ? \"Replacing\" : \"Adding\") + \" video track:\", stream.getVideoTracks()[0]);\n                    var videoTransceiver = null;\n                    var transceivers = config.pc.getTransceivers();\n                    if(transceivers && transceivers.length > 0) {\n                        for(var i in transceivers) {\n                            var t = transceivers[i];\n                            if((t.sender && t.sender.track && t.sender.track.kind === \"video\") ||\n                                (t.receiver && t.receiver.track && t.receiver.track.kind === \"video\")) {\n                                videoTransceiver = t;\n                                break;\n                            }\n                        }\n                    }\n                    if(videoTransceiver && videoTransceiver.sender) {\n                        videoTransceiver.sender.replaceTrack(stream.getVideoTracks()[0]);\n                    } else {\n                        config.pc.addTrack(stream.getVideoTracks()[0], stream);\n                    }\n                } else {\n                    Janus.log((media.replaceVideo ? \"Replacing\" : \"Adding\") + \" video track:\", stream.getVideoTracks()[0]);\n                    config.pc.addTrack(stream.getVideoTracks()[0], stream);\n                }\n            }\n        }\n        // If we still need to create a PeerConnection, let's do that\n        if(!config.pc) {\n            var pc_config = {\"iceServers\": iceServers, \"iceTransportPolicy\": iceTransportPolicy, \"bundlePolicy\": bundlePolicy};\n            if(Janus.webRTCAdapter.browserDetails.browser === \"chrome\") {\n                // For Chrome versions before 72, we force a plan-b semantic, and unified-plan otherwise\n                pc_config[\"sdpSemantics\"] = (Janus.webRTCAdapter.browserDetails.version < 72) ? \"plan-b\" : \"unified-plan\";\n            }\n            var pc_constraints = {\n                \"optional\": [{\"DtlsSrtpKeyAgreement\": true}]\n            };\n            if(ipv6Support === true) {\n                pc_constraints.optional.push({\"googIPv6\":true});\n            }\n            // Any custom constraint to add?\n            if(callbacks.rtcConstraints && typeof callbacks.rtcConstraints === 'object') {\n                Janus.debug(\"Adding custom PeerConnection constraints:\", callbacks.rtcConstraints);\n                for(var i in callbacks.rtcConstraints) {\n                    pc_constraints.optional.push(callbacks.rtcConstraints[i]);\n                }\n            }\n            if(Janus.webRTCAdapter.browserDetails.browser === \"edge\") {\n                // This is Edge, enable BUNDLE explicitly\n                pc_config.bundlePolicy = \"max-bundle\";\n            }\n            Janus.log(\"Creating PeerConnection\");\n            Janus.debug(pc_constraints);\n            config.pc = new RTCPeerConnection(pc_config, pc_constraints);\n            Janus.debug(config.pc);\n            if(config.pc.getStats) {\t// FIXME\n                config.volume = {};\n                config.bitrate.value = \"0 kbits/sec\";\n            }\n            Janus.log(\"Preparing local SDP and gathering candidates (trickle=\" + config.trickle + \")\");\n            config.pc.oniceconnectionstatechange = function(e) {\n                if(config.pc)\n                    pluginHandle.iceState(config.pc.iceConnectionState);\n            };\n            config.pc.onicecandidate = function(event) {\n                if (event.candidate == null ||\n                    (Janus.webRTCAdapter.browserDetails.browser === 'edge' && event.candidate.candidate.indexOf('endOfCandidates') > 0)) {\n                    Janus.log(\"End of candidates.\");\n                    config.iceDone = true;\n                    if(config.trickle === true) {\n                        // Notify end of candidates\n                        sendTrickleCandidate(handleId, {\"completed\": true});\n                    } else {\n                        // No trickle, time to send the complete SDP (including all candidates)\n                        sendSDP(handleId, callbacks);\n                    }\n                } else {\n                    // JSON.stringify doesn't work on some WebRTC objects anymore\n                    // See https://code.google.com/p/chromium/issues/detail?id=467366\n                    var candidate = {\n                        \"candidate\": event.candidate.candidate,\n                        \"sdpMid\": event.candidate.sdpMid,\n                        \"sdpMLineIndex\": event.candidate.sdpMLineIndex\n                    };\n                    if(config.trickle === true) {\n                        // Send candidate\n                        sendTrickleCandidate(handleId, candidate);\n                    }\n                }\n            };\n            config.pc.ontrack = function(event) {\n                Janus.log(\"Handling Remote Track\");\n                Janus.debug(event);\n                if(!event.streams)\n                    return;\n                config.remoteStream = event.streams[0];\n                pluginHandle.onremotestream(config.remoteStream);\n                if(event.track.onended)\n                    return;\n                Janus.log(\"Adding onended callback to track:\", event.track);\n                event.track.onended = function(ev) {\n                    Janus.log(\"Remote track muted/removed:\", ev);\n                    if(config.remoteStream) {\n                        config.remoteStream.removeTrack(ev.target);\n                        pluginHandle.onremotestream(config.remoteStream);\n                    }\n                };\n                event.track.onmute = event.track.onended;\n                event.track.onunmute = function(ev) {\n                    Janus.log(\"Remote track flowing again:\", ev);\n                    try {\n                        config.remoteStream.addTrack(ev.target);\n                        pluginHandle.onremotestream(config.remoteStream);\n                    } catch(e) {\n                        Janus.error(e);\n                    };\n                };\n            };\n        }\n        if(addTracks && stream !== null && stream !== undefined) {\n            Janus.log('Adding local stream');\n            var simulcast2 = callbacks.simulcast2 === true ? true : false;\n            stream.getTracks().forEach(function(track) {\n                Janus.log('Adding local track:', track);\n                if(!simulcast2) {\n                    config.pc.addTrack(track, stream);\n                } else {\n                    if(track.kind === \"audio\") {\n                        config.pc.addTrack(track, stream);\n                    } else {\n                        Janus.log('Enabling rid-based simulcasting:', track);\n                        config.pc.addTransceiver(track, {\n                            direction: \"sendrecv\",\n                            streams: [stream],\n                            sendEncodings: [\n                                { rid: \"h\", active: true, maxBitrate: 900000 },\n                                { rid: \"m\", active: true, maxBitrate: 300000, scaleResolutionDownBy: 2 },\n                                { rid: \"l\", active: true, maxBitrate: 100000, scaleResolutionDownBy: 4 }\n                            ]\n                        });\n                    }\n                }\n            });\n        }\n        // Any data channel to create?\n        if(isDataEnabled(media) && !config.dataChannel[Janus.dataChanDefaultLabel]) {\n            Janus.log(\"Creating data channel\");\n            createDataChannel(handleId, Janus.dataChanDefaultLabel, false);\n            config.pc.ondatachannel = function(event) {\n                Janus.log(\"Data channel created by Janus:\", event);\n                createDataChannel(handleId, event.channel.label, event.channel);\n            };\n        }\n        // If there's a new local stream, let's notify the application\n        if(config.myStream)\n            pluginHandle.onlocalstream(config.myStream);\n        // Create offer/answer now\n        if(jsep === null || jsep === undefined) {\n            createOffer(handleId, media, callbacks);\n        } else {\n            config.pc.setRemoteDescription(jsep)\n                .then(function() {\n                    Janus.log(\"Remote description accepted!\");\n                    config.remoteSdp = jsep.sdp;\n                    // Any trickle candidate we cached?\n                    if(config.candidates && config.candidates.length > 0) {\n                        for(var i in config.candidates) {\n                            var candidate = config.candidates[i];\n                            Janus.debug(\"Adding remote candidate:\", candidate);\n                            if(!candidate || candidate.completed === true) {\n                                // end-of-candidates\n                                config.pc.addIceCandidate({candidate:''});\n                            } else {\n                                // New candidate\n                                config.pc.addIceCandidate(candidate);\n                            }\n                        }\n                        config.candidates = [];\n                    }\n                    // Create the answer now\n                    createAnswer(handleId, media, callbacks);\n                }, callbacks.error);\n        }\n    }\n\n    function prepareWebrtc(handleId, offer, callbacks) {\n        callbacks = callbacks || {};\n        callbacks.success = (typeof callbacks.success == \"function\") ? callbacks.success : Janus.noop;\n        callbacks.error = (typeof callbacks.error == \"function\") ? callbacks.error : webrtcError;\n        var jsep = callbacks.jsep;\n        if(offer && jsep) {\n            Janus.error(\"Provided a JSEP to a createOffer\");\n            callbacks.error(\"Provided a JSEP to a createOffer\");\n            return;\n        } else if(!offer && (!jsep || !jsep.type || !jsep.sdp)) {\n            Janus.error(\"A valid JSEP is required for createAnswer\");\n            callbacks.error(\"A valid JSEP is required for createAnswer\");\n            return;\n        }\n        callbacks.media = callbacks.media || { audio: true, video: true };\n        var media = callbacks.media;\n        var pluginHandle = pluginHandles[handleId];\n        if(pluginHandle === null || pluginHandle === undefined ||\n            pluginHandle.webrtcStuff === null || pluginHandle.webrtcStuff === undefined) {\n            Janus.warn(\"Invalid handle\");\n            callbacks.error(\"Invalid handle\");\n            return;\n        }\n        var config = pluginHandle.webrtcStuff;\n        config.trickle = isTrickleEnabled(callbacks.trickle);\n        // Are we updating a session?\n        if(config.pc === undefined || config.pc === null) {\n            // Nope, new PeerConnection\n            media.update = false;\n            media.keepAudio = false;\n            media.keepVideo = false;\n        } else if(config.pc !== undefined && config.pc !== null) {\n            Janus.log(\"Updating existing media session\");\n            media.update = true;\n            // Check if there's anything to add/remove/replace, or if we\n            // can go directly to preparing the new SDP offer or answer\n            if(callbacks.stream !== null && callbacks.stream !== undefined) {\n                // External stream: is this the same as the one we were using before?\n                if(callbacks.stream !== config.myStream) {\n                    Janus.log(\"Renegotiation involves a new external stream\");\n                }\n            } else {\n                // Check if there are changes on audio\n                if(media.addAudio) {\n                    media.keepAudio = false;\n                    media.replaceAudio = false;\n                    media.removeAudio = false;\n                    media.audioSend = true;\n                    if(config.myStream && config.myStream.getAudioTracks() && config.myStream.getAudioTracks().length) {\n                        Janus.error(\"Can't add audio stream, there already is one\");\n                        callbacks.error(\"Can't add audio stream, there already is one\");\n                        return;\n                    }\n                } else if(media.removeAudio) {\n                    media.keepAudio = false;\n                    media.replaceAudio = false;\n                    media.addAudio = false;\n                    media.audioSend = false;\n                } else if(media.replaceAudio) {\n                    media.keepAudio = false;\n                    media.addAudio = false;\n                    media.removeAudio = false;\n                    media.audioSend = true;\n                }\n                if(config.myStream === null || config.myStream === undefined) {\n                    // No media stream: if we were asked to replace, it's actually an \"add\"\n                    if(media.replaceAudio) {\n                        media.keepAudio = false;\n                        media.replaceAudio = false;\n                        media.addAudio = true;\n                        media.audioSend = true;\n                    }\n                    if(isAudioSendEnabled(media)) {\n                        media.keepAudio = false;\n                        media.addAudio = true;\n                    }\n                } else {\n                    if(config.myStream.getAudioTracks() === null\n                        || config.myStream.getAudioTracks() === undefined\n                        || config.myStream.getAudioTracks().length === 0) {\n                        // No audio track: if we were asked to replace, it's actually an \"add\"\n                        if(media.replaceAudio) {\n                            media.keepAudio = false;\n                            media.replaceAudio = false;\n                            media.addAudio = true;\n                            media.audioSend = true;\n                        }\n                        if(isAudioSendEnabled(media)) {\n                            media.keepVideo = false;\n                            media.addAudio = true;\n                        }\n                    } else {\n                        // We have an audio track: should we keep it as it is?\n                        if(isAudioSendEnabled(media) &&\n                            !media.removeAudio && !media.replaceAudio) {\n                            media.keepAudio = true;\n                        }\n                    }\n                }\n                // Check if there are changes on video\n                if(media.addVideo) {\n                    media.keepVideo = false;\n                    media.replaceVideo = false;\n                    media.removeVideo = false;\n                    media.videoSend = true;\n                    if(config.myStream && config.myStream.getVideoTracks() && config.myStream.getVideoTracks().length) {\n                        Janus.error(\"Can't add video stream, there already is one\");\n                        callbacks.error(\"Can't add video stream, there already is one\");\n                        return;\n                    }\n                } else if(media.removeVideo) {\n                    media.keepVideo = false;\n                    media.replaceVideo = false;\n                    media.addVideo = false;\n                    media.videoSend = false;\n                } else if(media.replaceVideo) {\n                    media.keepVideo = false;\n                    media.addVideo = false;\n                    media.removeVideo = false;\n                    media.videoSend = true;\n                }\n                if(config.myStream === null || config.myStream === undefined) {\n                    // No media stream: if we were asked to replace, it's actually an \"add\"\n                    if(media.replaceVideo) {\n                        media.keepVideo = false;\n                        media.replaceVideo = false;\n                        media.addVideo = true;\n                        media.videoSend = true;\n                    }\n                    if(isVideoSendEnabled(media)) {\n                        media.keepVideo = false;\n                        media.addVideo = true;\n                    }\n                } else {\n                    if(config.myStream.getVideoTracks() === null\n                        || config.myStream.getVideoTracks() === undefined\n                        || config.myStream.getVideoTracks().length === 0) {\n                        // No video track: if we were asked to replace, it's actually an \"add\"\n                        if(media.replaceVideo) {\n                            media.keepVideo = false;\n                            media.replaceVideo = false;\n                            media.addVideo = true;\n                            media.videoSend = true;\n                        }\n                        if(isVideoSendEnabled(media)) {\n                            media.keepVideo = false;\n                            media.addVideo = true;\n                        }\n                    } else {\n                        // We have a video track: should we keep it as it is?\n                        if(isVideoSendEnabled(media) &&\n                            !media.removeVideo && !media.replaceVideo) {\n                            media.keepVideo = true;\n                        }\n                    }\n                }\n                // Data channels can only be added\n                if(media.addData)\n                    media.data = true;\n            }\n            // If we're updating and keeping all tracks, let's skip the getUserMedia part\n            if((isAudioSendEnabled(media) && media.keepAudio) &&\n                (isVideoSendEnabled(media) && media.keepVideo)) {\n                pluginHandle.consentDialog(false);\n                streamsDone(handleId, jsep, media, callbacks, config.myStream);\n                return;\n            }\n        }\n        // If we're updating, check if we need to remove/replace one of the tracks\n        if(media.update && !config.streamExternal) {\n            if(media.removeAudio || media.replaceAudio) {\n                if(config.myStream && config.myStream.getAudioTracks() && config.myStream.getAudioTracks().length) {\n                    var s = config.myStream.getAudioTracks()[0];\n                    Janus.log(\"Removing audio track:\", s);\n                    config.myStream.removeTrack(s);\n                    try {\n                        s.stop();\n                    } catch(e) {};\n                }\n                if(config.pc.getSenders() && config.pc.getSenders().length) {\n                    var ra = true;\n                    if(media.replaceAudio && Janus.unifiedPlan) {\n                        // We can use replaceTrack\n                        ra = false;\n                    }\n                    if(ra) {\n                        for(var index in config.pc.getSenders()) {\n                            var s = config.pc.getSenders()[index];\n                            if(s && s.track && s.track.kind === \"audio\") {\n                                Janus.log(\"Removing audio sender:\", s);\n                                config.pc.removeTrack(s);\n                            }\n                        }\n                    }\n                }\n            }\n            if(media.removeVideo || media.replaceVideo) {\n                if(config.myStream && config.myStream.getVideoTracks() && config.myStream.getVideoTracks().length) {\n                    var s = config.myStream.getVideoTracks()[0];\n                    Janus.log(\"Removing video track:\", s);\n                    config.myStream.removeTrack(s);\n                    try {\n                        s.stop();\n                    } catch(e) {};\n                }\n                if(config.pc.getSenders() && config.pc.getSenders().length) {\n                    var rv = true;\n                    if(media.replaceVideo && Janus.unifiedPlan) {\n                        // We can use replaceTrack\n                        rv = false;\n                    }\n                    if(rv) {\n                        for(var index in config.pc.getSenders()) {\n                            var s = config.pc.getSenders()[index];\n                            if(s && s.track && s.track.kind === \"video\") {\n                                Janus.log(\"Removing video sender:\", s);\n                                config.pc.removeTrack(s);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // Was a MediaStream object passed, or do we need to take care of that?\n        if(callbacks.stream !== null && callbacks.stream !== undefined) {\n            var stream = callbacks.stream;\n            Janus.log(\"MediaStream provided by the application\");\n            Janus.debug(stream);\n            // If this is an update, let's check if we need to release the previous stream\n            if(media.update) {\n                if(config.myStream && config.myStream !== callbacks.stream && !config.streamExternal) {\n                    // We're replacing a stream we captured ourselves with an external one\n                    try {\n                        // Try a MediaStreamTrack.stop() for each track\n                        var tracks = config.myStream.getTracks();\n                        for(var i in tracks) {\n                            var mst = tracks[i];\n                            Janus.log(mst);\n                            if(mst !== null && mst !== undefined)\n                                mst.stop();\n                        }\n                    } catch(e) {\n                        // Do nothing if this fails\n                    }\n                    config.myStream = null;\n                }\n            }\n            // Skip the getUserMedia part\n            config.streamExternal = true;\n            pluginHandle.consentDialog(false);\n            streamsDone(handleId, jsep, media, callbacks, stream);\n            return;\n        }\n        if(isAudioSendEnabled(media) || isVideoSendEnabled(media)) {\n            if(!Janus.isGetUserMediaAvailable()) {\n                callbacks.error(\"getUserMedia not available\");\n                return;\n            }\n            var constraints = { mandatory: {}, optional: []};\n            pluginHandle.consentDialog(true);\n            var audioSupport = isAudioSendEnabled(media);\n            if(audioSupport === true && media != undefined && media != null) {\n                if(typeof media.audio === 'object') {\n                    audioSupport = media.audio;\n                }\n            }\n            var videoSupport = isVideoSendEnabled(media);\n            if(videoSupport === true && media != undefined && media != null) {\n                var simulcast = callbacks.simulcast === true ? true : false;\n                var simulcast2 = callbacks.simulcast2 === true ? true : false;\n                if((simulcast || simulcast2) && !jsep && (media.video === undefined || media.video === false))\n                    media.video = \"hires\";\n                if(media.video && media.video != 'screen' && media.video != 'window') {\n                    if(typeof media.video === 'object') {\n                        videoSupport = media.video;\n                    } else {\n                        var width = 0;\n                        var height = 0, maxHeight = 0;\n                        if(media.video === 'lowres') {\n                            // Small resolution, 4:3\n                            height = 240;\n                            maxHeight = 240;\n                            width = 320;\n                        } else if(media.video === 'lowres-16:9') {\n                            // Small resolution, 16:9\n                            height = 180;\n                            maxHeight = 180;\n                            width = 320;\n                        } else if(media.video === 'hires' || media.video === 'hires-16:9' || media.video === 'hdres') {\n                            // High(HD) resolution is only 16:9\n                            height = 720;\n                            maxHeight = 720;\n                            width = 1280;\n                        } else if(media.video === 'fhdres') {\n                            // Full HD resolution is only 16:9\n                            height = 1080;\n                            maxHeight = 1080;\n                            width = 1920;\n                        } else if(media.video === '4kres') {\n                            // 4K resolution is only 16:9\n                            height = 2160;\n                            maxHeight = 2160;\n                            width = 3840;\n                        } else if(media.video === 'stdres') {\n                            // Normal resolution, 4:3\n                            height = 480;\n                            maxHeight = 480;\n                            width  = 640;\n                        } else if(media.video === 'stdres-16:9') {\n                            // Normal resolution, 16:9\n                            height = 360;\n                            maxHeight = 360;\n                            width = 640;\n                        } else {\n                            Janus.log(\"Default video setting is stdres 4:3\");\n                            height = 480;\n                            maxHeight = 480;\n                            width = 640;\n                        }\n                        Janus.log(\"Adding media constraint:\", media.video);\n                        videoSupport = {\n                            'height': {'ideal': height},\n                            'width':  {'ideal': width}\n                        };\n                        Janus.log(\"Adding video constraint:\", videoSupport);\n                    }\n                } else if(media.video === 'screen' || media.video === 'window') {\n                    if(!media.screenshareFrameRate) {\n                        media.screenshareFrameRate = 3;\n                    }\n                    if(navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia) {\n                        // The new experimental getDisplayMedia API is available, let's use that\n                        // https://groups.google.com/forum/#!topic/discuss-webrtc/Uf0SrR4uxzk\n                        // https://webrtchacks.com/chrome-screensharing-getdisplaymedia/\n                        navigator.mediaDevices.getDisplayMedia({ video: true })\n                            .then(function(stream) {\n                                pluginHandle.consentDialog(false);\n                                if(isAudioSendEnabled(media) && !media.keepAudio) {\n                                    navigator.mediaDevices.getUserMedia({ audio: true, video: false })\n                                        .then(function (audioStream) {\n                                            stream.addTrack(audioStream.getAudioTracks()[0]);\n                                            streamsDone(handleId, jsep, media, callbacks, stream);\n                                        })\n                                } else {\n                                    streamsDone(handleId, jsep, media, callbacks, stream);\n                                }\n                            }, function (error) {\n                                pluginHandle.consentDialog(false);\n                                callbacks.error(error);\n                            });\n                        return;\n                    }\n                    // We're going to try and use the extension for Chrome 34+, the old approach\n                    // for older versions of Chrome, or the experimental support in Firefox 33+\n                    function callbackUserMedia (error, stream) {\n                        pluginHandle.consentDialog(false);\n                        if(error) {\n                            callbacks.error(error);\n                        } else {\n                            streamsDone(handleId, jsep, media, callbacks, stream);\n                        }\n                    };\n                    function getScreenMedia(constraints, gsmCallback, useAudio) {\n                        Janus.log(\"Adding media constraint (screen capture)\");\n                        Janus.debug(constraints);\n                        navigator.mediaDevices.getUserMedia(constraints)\n                            .then(function(stream) {\n                                if(useAudio) {\n                                    navigator.mediaDevices.getUserMedia({ audio: true, video: false })\n                                        .then(function (audioStream) {\n                                            stream.addTrack(audioStream.getAudioTracks()[0]);\n                                            gsmCallback(null, stream);\n                                        })\n                                } else {\n                                    gsmCallback(null, stream);\n                                }\n                            })\n                            .catch(function(error) { pluginHandle.consentDialog(false); gsmCallback(error); });\n                    };\n                    if(Janus.webRTCAdapter.browserDetails.browser === 'chrome') {\n                        var chromever = Janus.webRTCAdapter.browserDetails.version;\n                        var maxver = 33;\n                        if(window.navigator.userAgent.match('Linux'))\n                            maxver = 35;\t// \"known\" crash in chrome 34 and 35 on linux\n                        if(chromever >= 26 && chromever <= maxver) {\n                            // Chrome 26->33 requires some awkward chrome://flags manipulation\n                            constraints = {\n                                video: {\n                                    mandatory: {\n                                        googLeakyBucket: true,\n                                        maxWidth: window.screen.width,\n                                        maxHeight: window.screen.height,\n                                        minFrameRate: media.screenshareFrameRate,\n                                        maxFrameRate: media.screenshareFrameRate,\n                                        chromeMediaSource: 'screen'\n                                    }\n                                },\n                                audio: isAudioSendEnabled(media) && !media.keepAudio\n                            };\n                            getScreenMedia(constraints, callbackUserMedia);\n                        } else {\n                            // Chrome 34+ requires an extension\n                            Janus.extension.getScreen(function (error, sourceId) {\n                                if (error) {\n                                    pluginHandle.consentDialog(false);\n                                    return callbacks.error(error);\n                                }\n                                constraints = {\n                                    audio: false,\n                                    video: {\n                                        mandatory: {\n                                            chromeMediaSource: 'desktop',\n                                            maxWidth: window.screen.width,\n                                            maxHeight: window.screen.height,\n                                            minFrameRate: media.screenshareFrameRate,\n                                            maxFrameRate: media.screenshareFrameRate,\n                                        },\n                                        optional: [\n                                            {googLeakyBucket: true},\n                                            {googTemporalLayeredScreencast: true}\n                                        ]\n                                    }\n                                };\n                                constraints.video.mandatory.chromeMediaSourceId = sourceId;\n                                getScreenMedia(constraints, callbackUserMedia,\n                                    isAudioSendEnabled(media) && !media.keepAudio);\n                            });\n                        }\n                    } else if(Janus.webRTCAdapter.browserDetails.browser === 'firefox') {\n                        if(Janus.webRTCAdapter.browserDetails.version >= 33) {\n                            // Firefox 33+ has experimental support for screen sharing\n                            constraints = {\n                                video: {\n                                    mozMediaSource: media.video,\n                                    mediaSource: media.video\n                                },\n                                audio: isAudioSendEnabled(media) && !media.keepAudio\n                            };\n                            getScreenMedia(constraints, function (err, stream) {\n                                callbackUserMedia(err, stream);\n                                // Workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=1045810\n                                if (!err) {\n                                    var lastTime = stream.currentTime;\n                                    var polly = window.setInterval(function () {\n                                        if(!stream)\n                                            window.clearInterval(polly);\n                                        if(stream.currentTime == lastTime) {\n                                            window.clearInterval(polly);\n                                            if(stream.onended) {\n                                                stream.onended();\n                                            }\n                                        }\n                                        lastTime = stream.currentTime;\n                                    }, 500);\n                                }\n                            });\n                        } else {\n                            var error = new Error('NavigatorUserMediaError');\n                            error.name = 'Your version of Firefox does not support screen sharing, please install Firefox 33 (or more recent versions)';\n                            pluginHandle.consentDialog(false);\n                            callbacks.error(error);\n                            return;\n                        }\n                    }\n                    return;\n                }\n            }\n            // If we got here, we're not screensharing\n            if(media === null || media === undefined || media.video !== 'screen') {\n                // Check whether all media sources are actually available or not\n                navigator.mediaDevices.enumerateDevices().then(function(devices) {\n                    var audioExist = devices.some(function(device) {\n                            return device.kind === 'audioinput';\n                        }),\n                        videoExist = isScreenSendEnabled(media) || devices.some(function(device) {\n                            return device.kind === 'videoinput';\n                        });\n\n                    // Check whether a missing device is really a problem\n                    var audioSend = isAudioSendEnabled(media);\n                    var videoSend = isVideoSendEnabled(media);\n                    var needAudioDevice = isAudioSendRequired(media);\n                    var needVideoDevice = isVideoSendRequired(media);\n                    if(audioSend || videoSend || needAudioDevice || needVideoDevice) {\n                        // We need to send either audio or video\n                        var haveAudioDevice = audioSend ? audioExist : false;\n                        var haveVideoDevice = videoSend ? videoExist : false;\n                        if(!haveAudioDevice && !haveVideoDevice) {\n                            // FIXME Should we really give up, or just assume recvonly for both?\n                            pluginHandle.consentDialog(false);\n                            callbacks.error('No capture device found');\n                            return false;\n                        } else if(!haveAudioDevice && needAudioDevice) {\n                            pluginHandle.consentDialog(false);\n                            callbacks.error('Audio capture is required, but no capture device found');\n                            return false;\n                        } else if(!haveVideoDevice && needVideoDevice) {\n                            pluginHandle.consentDialog(false);\n                            callbacks.error('Video capture is required, but no capture device found');\n                            return false;\n                        }\n                    }\n\n                    var gumConstraints = {\n                        audio: (audioExist && !media.keepAudio) ? audioSupport : false,\n                        video: (videoExist && !media.keepVideo) ? videoSupport : false\n                    };\n                    Janus.debug(\"getUserMedia constraints\", gumConstraints);\n                    if (!gumConstraints.audio && !gumConstraints.video) {\n                        pluginHandle.consentDialog(false);\n                        streamsDone(handleId, jsep, media, callbacks, stream);\n                    } else {\n                        navigator.mediaDevices.getUserMedia(gumConstraints)\n                            .then(function(stream) {\n                                pluginHandle.consentDialog(false);\n                                streamsDone(handleId, jsep, media, callbacks, stream);\n                            }).catch(function(error) {\n                            pluginHandle.consentDialog(false);\n                            callbacks.error({code: error.code, name: error.name, message: error.message});\n                        });\n                    }\n                })\n                    .catch(function(error) {\n                        pluginHandle.consentDialog(false);\n                        callbacks.error('enumerateDevices error', error);\n                    });\n            }\n        } else {\n            // No need to do a getUserMedia, create offer/answer right away\n            streamsDone(handleId, jsep, media, callbacks);\n        }\n    }\n\n    function prepareWebrtcPeer(handleId, callbacks) {\n        callbacks = callbacks || {};\n        callbacks.success = (typeof callbacks.success == \"function\") ? callbacks.success : Janus.noop;\n        callbacks.error = (typeof callbacks.error == \"function\") ? callbacks.error : webrtcError;\n        var jsep = callbacks.jsep;\n        var pluginHandle = pluginHandles[handleId];\n        if(pluginHandle === null || pluginHandle === undefined ||\n            pluginHandle.webrtcStuff === null || pluginHandle.webrtcStuff === undefined) {\n            Janus.warn(\"Invalid handle\");\n            callbacks.error(\"Invalid handle\");\n            return;\n        }\n        var config = pluginHandle.webrtcStuff;\n        if(jsep !== undefined && jsep !== null) {\n            if(config.pc === null) {\n                Janus.warn(\"Wait, no PeerConnection?? if this is an answer, use createAnswer and not handleRemoteJsep\");\n                callbacks.error(\"No PeerConnection: if this is an answer, use createAnswer and not handleRemoteJsep\");\n                return;\n            }\n            config.pc.setRemoteDescription(jsep)\n                .then(function() {\n                    Janus.log(\"Remote description accepted!\");\n                    config.remoteSdp = jsep.sdp;\n                    // Any trickle candidate we cached?\n                    if(config.candidates && config.candidates.length > 0) {\n                        for(var i in config.candidates) {\n                            var candidate = config.candidates[i];\n                            Janus.debug(\"Adding remote candidate:\", candidate);\n                            if(!candidate || candidate.completed === true) {\n                                // end-of-candidates\n                                config.pc.addIceCandidate({candidate:''});\n                            } else {\n                                // New candidate\n                                config.pc.addIceCandidate(candidate);\n                            }\n                        }\n                        config.candidates = [];\n                    }\n                    // Done\n                    callbacks.success();\n                }, callbacks.error);\n        } else {\n            callbacks.error(\"Invalid JSEP\");\n        }\n    }\n\n    function createOffer(handleId, media, callbacks) {\n        callbacks = callbacks || {};\n        callbacks.success = (typeof callbacks.success == \"function\") ? callbacks.success : Janus.noop;\n        callbacks.error = (typeof callbacks.error == \"function\") ? callbacks.error : Janus.noop;\n        callbacks.customizeSdp = (typeof callbacks.customizeSdp == \"function\") ? callbacks.customizeSdp : Janus.noop;\n        var pluginHandle = pluginHandles[handleId];\n        if(pluginHandle === null || pluginHandle === undefined ||\n            pluginHandle.webrtcStuff === null || pluginHandle.webrtcStuff === undefined) {\n            Janus.warn(\"Invalid handle\");\n            callbacks.error(\"Invalid handle\");\n            return;\n        }\n        var config = pluginHandle.webrtcStuff;\n        var simulcast = callbacks.simulcast === true ? true : false;\n        if(!simulcast) {\n            Janus.log(\"Creating offer (iceDone=\" + config.iceDone + \")\");\n        } else {\n            Janus.log(\"Creating offer (iceDone=\" + config.iceDone + \", simulcast=\" + simulcast + \")\");\n        }\n        // https://code.google.com/p/webrtc/issues/detail?id=3508\n        var mediaConstraints = {};\n        if(Janus.unifiedPlan) {\n            // We can use Transceivers\n            var audioTransceiver = null, videoTransceiver = null;\n            var transceivers = config.pc.getTransceivers();\n            if(transceivers && transceivers.length > 0) {\n                for(var i in transceivers) {\n                    var t = transceivers[i];\n                    if((t.sender && t.sender.track && t.sender.track.kind === \"audio\") ||\n                        (t.receiver && t.receiver.track && t.receiver.track.kind === \"audio\")) {\n                        if(!audioTransceiver)\n                            audioTransceiver = t;\n                        continue;\n                    }\n                    if((t.sender && t.sender.track && t.sender.track.kind === \"video\") ||\n                        (t.receiver && t.receiver.track && t.receiver.track.kind === \"video\")) {\n                        if(!videoTransceiver)\n                            videoTransceiver = t;\n                        continue;\n                    }\n                }\n            }\n            // Handle audio (and related changes, if any)\n            var audioSend = isAudioSendEnabled(media);\n            var audioRecv = isAudioRecvEnabled(media);\n            if(!audioSend && !audioRecv) {\n                // Audio disabled: have we removed it?\n                if(media.removeAudio && audioTransceiver) {\n                    if (audioTransceiver.setDirection) {\n                        audioTransceiver.setDirection(\"inactive\");\n                    } else {\n                        audioTransceiver.direction = \"inactive\";\n                    }\n                    Janus.log(\"Setting audio transceiver to inactive:\", audioTransceiver);\n                }\n            } else {\n                // Take care of audio m-line\n                if(audioSend && audioRecv) {\n                    if(audioTransceiver) {\n                        if (audioTransceiver.setDirection) {\n                            audioTransceiver.setDirection(\"sendrecv\");\n                        } else {\n                            audioTransceiver.direction = \"sendrecv\";\n                        }\n                        Janus.log(\"Setting audio transceiver to sendrecv:\", audioTransceiver);\n                    }\n                } else if(audioSend && !audioRecv) {\n                    if(audioTransceiver) {\n                        if (audioTransceiver.setDirection) {\n                            audioTransceiver.setDirection(\"sendonly\");\n                        } else {\n                            audioTransceiver.direction = \"sendonly\";\n                        }\n                        Janus.log(\"Setting audio transceiver to sendonly:\", audioTransceiver);\n                    }\n                } else if(!audioSend && audioRecv) {\n                    if(audioTransceiver) {\n                        if (audioTransceiver.setDirection) {\n                            audioTransceiver.setDirection(\"recvonly\");\n                        } else {\n                            audioTransceiver.direction = \"recvonly\";\n                        }\n                        Janus.log(\"Setting audio transceiver to recvonly:\", audioTransceiver);\n                    } else {\n                        // In theory, this is the only case where we might not have a transceiver yet\n                        audioTransceiver = config.pc.addTransceiver(\"audio\", { direction: \"recvonly\" });\n                        Janus.log(\"Adding recvonly audio transceiver:\", audioTransceiver);\n                    }\n                }\n            }\n            // Handle video (and related changes, if any)\n            var videoSend = isVideoSendEnabled(media);\n            var videoRecv = isVideoRecvEnabled(media);\n            if(!videoSend && !videoRecv) {\n                // Video disabled: have we removed it?\n                if(media.removeVideo && videoTransceiver) {\n                    if (videoTransceiver.setDirection) {\n                        videoTransceiver.setDirection(\"inactive\");\n                    } else {\n                        videoTransceiver.direction = \"inactive\";\n                    }\n                    Janus.log(\"Setting video transceiver to inactive:\", videoTransceiver);\n                }\n            } else {\n                // Take care of video m-line\n                if(videoSend && videoRecv) {\n                    if(videoTransceiver) {\n                        if (videoTransceiver.setDirection) {\n                            videoTransceiver.setDirection(\"sendrecv\");\n                        } else {\n                            videoTransceiver.direction = \"sendrecv\";\n                        }\n                        Janus.log(\"Setting video transceiver to sendrecv:\", videoTransceiver);\n                    }\n                } else if(videoSend && !videoRecv) {\n                    if(videoTransceiver) {\n                        if (videoTransceiver.setDirection) {\n                            videoTransceiver.setDirection(\"sendonly\");\n                        } else {\n                            videoTransceiver.direction = \"sendonly\";\n                        }\n                        Janus.log(\"Setting video transceiver to sendonly:\", videoTransceiver);\n                    }\n                } else if(!videoSend && videoRecv) {\n                    if(videoTransceiver) {\n                        if (videoTransceiver.setDirection) {\n                            videoTransceiver.setDirection(\"recvonly\");\n                        } else {\n                            videoTransceiver.direction = \"recvonly\";\n                        }\n                        Janus.log(\"Setting video transceiver to recvonly:\", videoTransceiver);\n                    } else {\n                        // In theory, this is the only case where we might not have a transceiver yet\n                        videoTransceiver = config.pc.addTransceiver(\"video\", { direction: \"recvonly\" });\n                        Janus.log(\"Adding recvonly video transceiver:\", videoTransceiver);\n                    }\n                }\n            }\n        } else {\n            mediaConstraints[\"offerToReceiveAudio\"] = isAudioRecvEnabled(media);\n            mediaConstraints[\"offerToReceiveVideo\"] = isVideoRecvEnabled(media);\n        }\n        var iceRestart = callbacks.iceRestart === true ? true : false;\n        if(iceRestart) {\n            mediaConstraints[\"iceRestart\"] = true;\n        }\n        Janus.debug(mediaConstraints);\n        // Check if this is Firefox and we've been asked to do simulcasting\n        var sendVideo = isVideoSendEnabled(media);\n        if(sendVideo && simulcast && Janus.webRTCAdapter.browserDetails.browser === \"firefox\") {\n            // FIXME Based on https://gist.github.com/voluntas/088bc3cc62094730647b\n            Janus.log(\"Enabling Simulcasting for Firefox (RID)\");\n            var sender = config.pc.getSenders().find(function(s) {return s.track.kind == \"video\"});\n            if(sender) {\n                var parameters = sender.getParameters();\n                if(!parameters)\n                    parameters = {};\n                parameters.encodings = [\n                    { rid: \"h\", active: true, maxBitrate: 900000 },\n                    { rid: \"m\", active: true, maxBitrate: 300000, scaleResolutionDownBy: 2 },\n                    { rid: \"l\", active: true, maxBitrate: 100000, scaleResolutionDownBy: 4 }\n                ];\n                sender.setParameters(parameters);\n            }\n        }\n        config.pc.createOffer(mediaConstraints)\n            .then(function(offer) {\n                Janus.debug(offer);\n                // JSON.stringify doesn't work on some WebRTC objects anymore\n                // See https://code.google.com/p/chromium/issues/detail?id=467366\n                var jsep = {\n                    \"type\": offer.type,\n                    \"sdp\": offer.sdp\n                };\n                callbacks.customizeSdp(jsep);\n                offer.sdp = jsep.sdp;\n                Janus.log(\"Setting local description\");\n                if(sendVideo && simulcast) {\n                    // This SDP munging only works with Chrome (Safari STP may support it too)\n                    if(Janus.webRTCAdapter.browserDetails.browser === \"chrome\" ||\n                        Janus.webRTCAdapter.browserDetails.browser === \"safari\") {\n                        Janus.log(\"Enabling Simulcasting for Chrome (SDP munging)\");\n                        offer.sdp = mungeSdpForSimulcasting(offer.sdp);\n                    } else if(Janus.webRTCAdapter.browserDetails.browser !== \"firefox\") {\n                        Janus.warn(\"simulcast=true, but this is not Chrome nor Firefox, ignoring\");\n                    }\n                }\n                config.mySdp = offer.sdp;\n                config.pc.setLocalDescription(offer)\n                    .catch(callbacks.error);\n                config.mediaConstraints = mediaConstraints;\n                if(!config.iceDone && !config.trickle) {\n                    // Don't do anything until we have all candidates\n                    Janus.log(\"Waiting for all candidates...\");\n                    return;\n                }\n                Janus.log(\"Offer ready\");\n                Janus.debug(callbacks);\n                callbacks.success(offer);\n            }, callbacks.error);\n    }\n\n    function createAnswer(handleId, media, callbacks) {\n        callbacks = callbacks || {};\n        callbacks.success = (typeof callbacks.success == \"function\") ? callbacks.success : Janus.noop;\n        callbacks.error = (typeof callbacks.error == \"function\") ? callbacks.error : Janus.noop;\n        callbacks.customizeSdp = (typeof callbacks.customizeSdp == \"function\") ? callbacks.customizeSdp : Janus.noop;\n        var pluginHandle = pluginHandles[handleId];\n        if(pluginHandle === null || pluginHandle === undefined ||\n            pluginHandle.webrtcStuff === null || pluginHandle.webrtcStuff === undefined) {\n            Janus.warn(\"Invalid handle\");\n            callbacks.error(\"Invalid handle\");\n            return;\n        }\n        var config = pluginHandle.webrtcStuff;\n        var simulcast = callbacks.simulcast === true ? true : false;\n        if(!simulcast) {\n            Janus.log(\"Creating answer (iceDone=\" + config.iceDone + \")\");\n        } else {\n            Janus.log(\"Creating answer (iceDone=\" + config.iceDone + \", simulcast=\" + simulcast + \")\");\n        }\n        var mediaConstraints = null;\n        if(Janus.unifiedPlan) {\n            // We can use Transceivers\n            mediaConstraints = {};\n            var audioTransceiver = null, videoTransceiver = null;\n            var transceivers = config.pc.getTransceivers();\n            if(transceivers && transceivers.length > 0) {\n                for(var i in transceivers) {\n                    var t = transceivers[i];\n                    if((t.sender && t.sender.track && t.sender.track.kind === \"audio\") ||\n                        (t.receiver && t.receiver.track && t.receiver.track.kind === \"audio\")) {\n                        if(!audioTransceiver)\n                            audioTransceiver = t;\n                        continue;\n                    }\n                    if((t.sender && t.sender.track && t.sender.track.kind === \"video\") ||\n                        (t.receiver && t.receiver.track && t.receiver.track.kind === \"video\")) {\n                        if(!videoTransceiver)\n                            videoTransceiver = t;\n                        continue;\n                    }\n                }\n            }\n            // Handle audio (and related changes, if any)\n            var audioSend = isAudioSendEnabled(media);\n            var audioRecv = isAudioRecvEnabled(media);\n            if(!audioSend && !audioRecv) {\n                // Audio disabled: have we removed it?\n                if(media.removeAudio && audioTransceiver) {\n                    try {\n                        if (audioTransceiver.setDirection) {\n                            audioTransceiver.setDirection(\"inactive\");\n                        } else {\n                            audioTransceiver.direction = \"inactive\";\n                        }\n                        Janus.log(\"Setting audio transceiver to inactive:\", audioTransceiver);\n                    } catch(e) {\n                        Janus.error(e);\n                    }\n                }\n            } else {\n                // Take care of audio m-line\n                if(audioSend && audioRecv) {\n                    if(audioTransceiver) {\n                        try {\n                            if (audioTransceiver.setDirection) {\n                                audioTransceiver.setDirection(\"sendrecv\");\n                            } else {\n                                audioTransceiver.direction = \"sendrecv\";\n                            }\n                            Janus.log(\"Setting audio transceiver to sendrecv:\", audioTransceiver);\n                        } catch(e) {\n                            Janus.error(e);\n                        }\n                    }\n                } else if(audioSend && !audioRecv) {\n                    try {\n                        if(audioTransceiver) {\n                            if (audioTransceiver.setDirection) {\n                                audioTransceiver.setDirection(\"sendonly\");\n                            } else {\n                                audioTransceiver.direction = \"sendonly\";\n                            }\n                            Janus.log(\"Setting audio transceiver to sendonly:\", audioTransceiver);\n                        }\n                    } catch(e) {\n                        Janus.error(e);\n                    }\n                } else if(!audioSend && audioRecv) {\n                    if(audioTransceiver) {\n                        try {\n                            if (audioTransceiver.setDirection) {\n                                audioTransceiver.setDirection(\"recvonly\");\n                            } else {\n                                audioTransceiver.direction = \"recvonly\";\n                            }\n                            Janus.log(\"Setting audio transceiver to recvonly:\", audioTransceiver);\n                        } catch(e) {\n                            Janus.error(e);\n                        }\n                    } else {\n                        // In theory, this is the only case where we might not have a transceiver yet\n                        audioTransceiver = config.pc.addTransceiver(\"audio\", { direction: \"recvonly\" });\n                        Janus.log(\"Adding recvonly audio transceiver:\", audioTransceiver);\n                    }\n                }\n            }\n            // Handle video (and related changes, if any)\n            var videoSend = isVideoSendEnabled(media);\n            var videoRecv = isVideoRecvEnabled(media);\n            if(!videoSend && !videoRecv) {\n                // Video disabled: have we removed it?\n                if(media.removeVideo && videoTransceiver) {\n                    try {\n                        if (videoTransceiver.setDirection) {\n                            videoTransceiver.setDirection(\"inactive\");\n                        } else {\n                            videoTransceiver.direction = \"inactive\";\n                        }\n                        Janus.log(\"Setting video transceiver to inactive:\", videoTransceiver);\n                    } catch(e) {\n                        Janus.error(e);\n                    }\n                }\n            } else {\n                // Take care of video m-line\n                if(videoSend && videoRecv) {\n                    if(videoTransceiver) {\n                        try {\n                            if (videoTransceiver.setDirection) {\n                                videoTransceiver.setDirection(\"sendrecv\");\n                            } else {\n                                videoTransceiver.direction = \"sendrecv\";\n                            }\n                            Janus.log(\"Setting video transceiver to sendrecv:\", videoTransceiver);\n                        } catch(e) {\n                            Janus.error(e);\n                        }\n                    }\n                } else if(videoSend && !videoRecv) {\n                    if(videoTransceiver) {\n                        try {\n                            if (videoTransceiver.setDirection) {\n                                videoTransceiver.setDirection(\"sendonly\");\n                            } else {\n                                videoTransceiver.direction = \"sendonly\";\n                            }\n                            Janus.log(\"Setting video transceiver to sendonly:\", videoTransceiver);\n                        } catch(e) {\n                            Janus.error(e);\n                        }\n                    }\n                } else if(!videoSend && videoRecv) {\n                    if(videoTransceiver) {\n                        try {\n                            if (videoTransceiver.setDirection) {\n                                videoTransceiver.setDirection(\"recvonly\");\n                            } else {\n                                videoTransceiver.direction = \"recvonly\";\n                            }\n                            Janus.log(\"Setting video transceiver to recvonly:\", videoTransceiver);\n                        } catch(e) {\n                            Janus.error(e);\n                        }\n                    } else {\n                        // In theory, this is the only case where we might not have a transceiver yet\n                        videoTransceiver = config.pc.addTransceiver(\"video\", { direction: \"recvonly\" });\n                        Janus.log(\"Adding recvonly video transceiver:\", videoTransceiver);\n                    }\n                }\n            }\n        } else {\n            if(Janus.webRTCAdapter.browserDetails.browser == \"firefox\" || Janus.webRTCAdapter.browserDetails.browser == \"edge\") {\n                mediaConstraints = {\n                    offerToReceiveAudio: isAudioRecvEnabled(media),\n                    offerToReceiveVideo: isVideoRecvEnabled(media)\n                };\n            } else {\n                mediaConstraints = {\n                    mandatory: {\n                        OfferToReceiveAudio: isAudioRecvEnabled(media),\n                        OfferToReceiveVideo: isVideoRecvEnabled(media)\n                    }\n                };\n            }\n        }\n        Janus.debug(mediaConstraints);\n        // Check if this is Firefox and we've been asked to do simulcasting\n        var sendVideo = isVideoSendEnabled(media);\n        if(sendVideo && simulcast && Janus.webRTCAdapter.browserDetails.browser === \"firefox\") {\n            // FIXME Based on https://gist.github.com/voluntas/088bc3cc62094730647b\n            Janus.log(\"Enabling Simulcasting for Firefox (RID)\");\n            var sender = config.pc.getSenders()[1];\n            Janus.log(sender);\n            var parameters = sender.getParameters();\n            Janus.log(parameters);\n            sender.setParameters({encodings: [\n                    { rid: \"high\", active: true, priority: \"high\", maxBitrate: 1000000 },\n                    { rid: \"medium\", active: true, priority: \"medium\", maxBitrate: 300000 },\n                    { rid: \"low\", active: true, priority: \"low\", maxBitrate: 100000 }\n                ]});\n        }\n        config.pc.createAnswer(mediaConstraints)\n            .then(function(answer) {\n                Janus.debug(answer);\n                // JSON.stringify doesn't work on some WebRTC objects anymore\n                // See https://code.google.com/p/chromium/issues/detail?id=467366\n                var jsep = {\n                    \"type\": answer.type,\n                    \"sdp\": answer.sdp\n                };\n                callbacks.customizeSdp(jsep);\n                answer.sdp = jsep.sdp;\n                Janus.log(\"Setting local description\");\n                if(sendVideo && simulcast) {\n                    // This SDP munging only works with Chrome\n                    if(Janus.webRTCAdapter.browserDetails.browser === \"chrome\") {\n                        // FIXME Apparently trying to simulcast when answering breaks video in Chrome...\n                        //~ Janus.log(\"Enabling Simulcasting for Chrome (SDP munging)\");\n                        //~ answer.sdp = mungeSdpForSimulcasting(answer.sdp);\n                        Janus.warn(\"simulcast=true, but this is an answer, and video breaks in Chrome if we enable it\");\n                    } else if(Janus.webRTCAdapter.browserDetails.browser !== \"firefox\") {\n                        Janus.warn(\"simulcast=true, but this is not Chrome nor Firefox, ignoring\");\n                    }\n                }\n                config.mySdp = answer.sdp;\n                config.pc.setLocalDescription(answer)\n                    .catch(callbacks.error);\n                config.mediaConstraints = mediaConstraints;\n                if(!config.iceDone && !config.trickle) {\n                    // Don't do anything until we have all candidates\n                    Janus.log(\"Waiting for all candidates...\");\n                    return;\n                }\n                callbacks.success(answer);\n            }, callbacks.error);\n    }\n\n    function sendSDP(handleId, callbacks) {\n        callbacks = callbacks || {};\n        callbacks.success = (typeof callbacks.success == \"function\") ? callbacks.success : Janus.noop;\n        callbacks.error = (typeof callbacks.error == \"function\") ? callbacks.error : Janus.noop;\n        var pluginHandle = pluginHandles[handleId];\n        if(pluginHandle === null || pluginHandle === undefined ||\n            pluginHandle.webrtcStuff === null || pluginHandle.webrtcStuff === undefined) {\n            Janus.warn(\"Invalid handle, not sending anything\");\n            return;\n        }\n        var config = pluginHandle.webrtcStuff;\n        Janus.log(\"Sending offer/answer SDP...\");\n        if(config.mySdp === null || config.mySdp === undefined) {\n            Janus.warn(\"Local SDP instance is invalid, not sending anything...\");\n            return;\n        }\n        config.mySdp = {\n            \"type\": config.pc.localDescription.type,\n            \"sdp\": config.pc.localDescription.sdp\n        };\n        if(config.trickle === false)\n            config.mySdp[\"trickle\"] = false;\n        Janus.debug(callbacks);\n        config.sdpSent = true;\n        callbacks.success(config.mySdp);\n    }\n\n    function getVolume(handleId, remote) {\n        var pluginHandle = pluginHandles[handleId];\n        if(pluginHandle === null || pluginHandle === undefined ||\n            pluginHandle.webrtcStuff === null || pluginHandle.webrtcStuff === undefined) {\n            Janus.warn(\"Invalid handle\");\n            return 0;\n        }\n        var stream = remote ? \"remote\" : \"local\";\n        var config = pluginHandle.webrtcStuff;\n        if(!config.volume[stream])\n            config.volume[stream] = { value: 0 };\n        // Start getting the volume, if getStats is supported\n        if(config.pc.getStats && Janus.webRTCAdapter.browserDetails.browser === \"chrome\") {\n            if(remote && (config.remoteStream === null || config.remoteStream === undefined)) {\n                Janus.warn(\"Remote stream unavailable\");\n                return 0;\n            } else if(!remote && (config.myStream === null || config.myStream === undefined)) {\n                Janus.warn(\"Local stream unavailable\");\n                return 0;\n            }\n            if(config.volume[stream].timer === null || config.volume[stream].timer === undefined) {\n                Janus.log(\"Starting \" + stream + \" volume monitor\");\n                config.volume[stream].timer = setInterval(function() {\n                    config.pc.getStats(function(stats) {\n                        var results = stats.result();\n                        for(var i=0; i<results.length; i++) {\n                            var res = results[i];\n                            if(res.type == 'ssrc') {\n                                if(remote && res.stat('audioOutputLevel'))\n                                    config.volume[stream].value = parseInt(res.stat('audioOutputLevel'));\n                                else if(!remote && res.stat('audioInputLevel'))\n                                    config.volume[stream].value = parseInt(res.stat('audioInputLevel'));\n                            }\n                        }\n                    });\n                }, 200);\n                return 0;\t// We don't have a volume to return yet\n            }\n            return config.volume[stream].value;\n        } else {\n            // audioInputLevel and audioOutputLevel seem only available in Chrome? audioLevel\n            // seems to be available on Chrome and Firefox, but they don't seem to work\n            Janus.warn(\"Getting the \" + stream + \" volume unsupported by browser\");\n            return 0;\n        }\n    }\n\n    function isMuted(handleId, video) {\n        var pluginHandle = pluginHandles[handleId];\n        if(pluginHandle === null || pluginHandle === undefined ||\n            pluginHandle.webrtcStuff === null || pluginHandle.webrtcStuff === undefined) {\n            Janus.warn(\"Invalid handle\");\n            return true;\n        }\n        var config = pluginHandle.webrtcStuff;\n        if(config.pc === null || config.pc === undefined) {\n            Janus.warn(\"Invalid PeerConnection\");\n            return true;\n        }\n        if(config.myStream === undefined || config.myStream === null) {\n            Janus.warn(\"Invalid local MediaStream\");\n            return true;\n        }\n        if(video) {\n            // Check video track\n            if(config.myStream.getVideoTracks() === null\n                || config.myStream.getVideoTracks() === undefined\n                || config.myStream.getVideoTracks().length === 0) {\n                Janus.warn(\"No video track\");\n                return true;\n            }\n            return !config.myStream.getVideoTracks()[0].enabled;\n        } else {\n            // Check audio track\n            if(config.myStream.getAudioTracks() === null\n                || config.myStream.getAudioTracks() === undefined\n                || config.myStream.getAudioTracks().length === 0) {\n                Janus.warn(\"No audio track\");\n                return true;\n            }\n            return !config.myStream.getAudioTracks()[0].enabled;\n        }\n    }\n\n    function mute(handleId, video, mute) {\n        var pluginHandle = pluginHandles[handleId];\n        if(pluginHandle === null || pluginHandle === undefined ||\n            pluginHandle.webrtcStuff === null || pluginHandle.webrtcStuff === undefined) {\n            Janus.warn(\"Invalid handle\");\n            return false;\n        }\n        var config = pluginHandle.webrtcStuff;\n        if(config.pc === null || config.pc === undefined) {\n            Janus.warn(\"Invalid PeerConnection\");\n            return false;\n        }\n        if(config.myStream === undefined || config.myStream === null) {\n            Janus.warn(\"Invalid local MediaStream\");\n            return false;\n        }\n        if(video) {\n            // Mute/unmute video track\n            if(config.myStream.getVideoTracks() === null\n                || config.myStream.getVideoTracks() === undefined\n                || config.myStream.getVideoTracks().length === 0) {\n                Janus.warn(\"No video track\");\n                return false;\n            }\n            config.myStream.getVideoTracks()[0].enabled = mute ? false : true;\n            return true;\n        } else {\n            // Mute/unmute audio track\n            if(config.myStream.getAudioTracks() === null\n                || config.myStream.getAudioTracks() === undefined\n                || config.myStream.getAudioTracks().length === 0) {\n                Janus.warn(\"No audio track\");\n                return false;\n            }\n            config.myStream.getAudioTracks()[0].enabled = mute ? false : true;\n            return true;\n        }\n    }\n\n    function getBitrate(handleId) {\n        var pluginHandle = pluginHandles[handleId];\n        if(pluginHandle === null || pluginHandle === undefined ||\n            pluginHandle.webrtcStuff === null || pluginHandle.webrtcStuff === undefined) {\n            Janus.warn(\"Invalid handle\");\n            return \"Invalid handle\";\n        }\n        var config = pluginHandle.webrtcStuff;\n        if(config.pc === null || config.pc === undefined)\n            return \"Invalid PeerConnection\";\n        // Start getting the bitrate, if getStats is supported\n        if(config.pc.getStats) {\n            if(config.bitrate.timer === null || config.bitrate.timer === undefined) {\n                Janus.log(\"Starting bitrate timer (via getStats)\");\n                config.bitrate.timer = setInterval(function() {\n                    config.pc.getStats()\n                        .then(function(stats) {\n                            stats.forEach(function (res) {\n                                if(!res)\n                                    return;\n                                var inStats = false;\n                                // Check if these are statistics on incoming media\n                                if((res.mediaType === \"video\" || res.id.toLowerCase().indexOf(\"video\") > -1) &&\n                                    res.type === \"inbound-rtp\" && res.id.indexOf(\"rtcp\") < 0) {\n                                    // New stats\n                                    inStats = true;\n                                } else if(res.type == 'ssrc' && res.bytesReceived &&\n                                    (res.googCodecName === \"VP8\" || res.googCodecName === \"\")) {\n                                    // Older Chromer versions\n                                    inStats = true;\n                                }\n                                // Parse stats now\n                                if(inStats) {\n                                    config.bitrate.bsnow = res.bytesReceived;\n                                    config.bitrate.tsnow = res.timestamp;\n                                    if(config.bitrate.bsbefore === null || config.bitrate.tsbefore === null) {\n                                        // Skip this round\n                                        config.bitrate.bsbefore = config.bitrate.bsnow;\n                                        config.bitrate.tsbefore = config.bitrate.tsnow;\n                                    } else {\n                                        // Calculate bitrate\n                                        var timePassed = config.bitrate.tsnow - config.bitrate.tsbefore;\n                                        if(Janus.webRTCAdapter.browserDetails.browser == \"safari\")\n                                            timePassed = timePassed/1000;\t// Apparently the timestamp is in microseconds, in Safari\n                                        var bitRate = Math.round((config.bitrate.bsnow - config.bitrate.bsbefore) * 8 / timePassed);\n                                        if(Janus.webRTCAdapter.browserDetails.browser === 'safari')\n                                            bitRate = parseInt(bitRate/1000);\n                                        config.bitrate.value = bitRate + ' kbits/sec';\n                                        //~ Janus.log(\"Estimated bitrate is \" + config.bitrate.value);\n                                        config.bitrate.bsbefore = config.bitrate.bsnow;\n                                        config.bitrate.tsbefore = config.bitrate.tsnow;\n                                    }\n                                }\n                            });\n                        });\n                }, 1000);\n                return \"0 kbits/sec\";\t// We don't have a bitrate value yet\n            }\n            return config.bitrate.value;\n        } else {\n            Janus.warn(\"Getting the video bitrate unsupported by browser\");\n            return \"Feature unsupported by browser\";\n        }\n    }\n\n    function webrtcError(error) {\n        Janus.error(\"WebRTC error:\", error);\n    }\n\n    function cleanupWebrtc(handleId, hangupRequest) {\n        Janus.log(\"Cleaning WebRTC stuff\");\n        var pluginHandle = pluginHandles[handleId];\n        if(pluginHandle === null || pluginHandle === undefined) {\n            // Nothing to clean\n            return;\n        }\n        var config = pluginHandle.webrtcStuff;\n        if(config !== null && config !== undefined) {\n            if(hangupRequest === true) {\n                // Send a hangup request (we don't really care about the response)\n                var request = { \"janus\": \"hangup\", \"transaction\": Janus.randomString(12) };\n                if(pluginHandle.token !== null && pluginHandle.token !== undefined)\n                    request[\"token\"] = pluginHandle.token;\n                if(apisecret !== null && apisecret !== undefined)\n                    request[\"apisecret\"] = apisecret;\n                Janus.debug(\"Sending hangup request (handle=\" + handleId + \"):\");\n                Janus.debug(request);\n                if(websockets) {\n                    request[\"session_id\"] = sessionId;\n                    request[\"handle_id\"] = handleId;\n                    ws.send(JSON.stringify(request));\n                } else {\n                    Janus.httpAPICall(server + \"/\" + sessionId + \"/\" + handleId, {\n                        verb: 'POST',\n                        withCredentials: withCredentials,\n                        body: request\n                    });\n                }\n            }\n            // Cleanup stack\n            config.remoteStream = null;\n            if(config.volume) {\n                if(config.volume[\"local\"] && config.volume[\"local\"].timer)\n                    clearInterval(config.volume[\"local\"].timer);\n                if(config.volume[\"remote\"] && config.volume[\"remote\"].timer)\n                    clearInterval(config.volume[\"remote\"].timer);\n            }\n            config.volume = {};\n            if(config.bitrate.timer)\n                clearInterval(config.bitrate.timer);\n            config.bitrate.timer = null;\n            config.bitrate.bsnow = null;\n            config.bitrate.bsbefore = null;\n            config.bitrate.tsnow = null;\n            config.bitrate.tsbefore = null;\n            config.bitrate.value = null;\n            try {\n                // Try a MediaStreamTrack.stop() for each track\n                if(!config.streamExternal && config.myStream !== null && config.myStream !== undefined) {\n                    Janus.log(\"Stopping local stream tracks\");\n                    var tracks = config.myStream.getTracks();\n                    for(var i in tracks) {\n                        var mst = tracks[i];\n                        Janus.log(mst);\n                        if(mst !== null && mst !== undefined)\n                            mst.stop();\n                    }\n                }\n            } catch(e) {\n                // Do nothing if this fails\n            }\n            config.streamExternal = false;\n            config.myStream = null;\n            // Close PeerConnection\n            try {\n                config.pc.close();\n            } catch(e) {\n                // Do nothing\n            }\n            config.pc = null;\n            config.candidates = null;\n            config.mySdp = null;\n            config.remoteSdp = null;\n            config.iceDone = false;\n            config.dataChannel = {};\n            config.dtmfSender = null;\n        }\n        pluginHandle.oncleanup();\n    }\n\n    // Helper method to munge an SDP to enable simulcasting (Chrome only)\n    function mungeSdpForSimulcasting(sdp) {\n        // Let's munge the SDP to add the attributes for enabling simulcasting\n        // (based on https://gist.github.com/ggarber/a19b4c33510028b9c657)\n        var lines = sdp.split(\"\\r\\n\");\n        var video = false;\n        var ssrc = [ -1 ], ssrc_fid = [ -1 ];\n        var cname = null, msid = null, mslabel = null, label = null;\n        var insertAt = -1;\n        for(var i=0; i<lines.length; i++) {\n            var mline = lines[i].match(/m=(\\w+) */);\n            if(mline) {\n                var medium = mline[1];\n                if(medium === \"video\") {\n                    // New video m-line: make sure it's the first one\n                    if(ssrc[0] < 0) {\n                        video = true;\n                    } else {\n                        // We're done, let's add the new attributes here\n                        insertAt = i;\n                        break;\n                    }\n                } else {\n                    // New non-video m-line: do we have what we were looking for?\n                    if(ssrc[0] > -1) {\n                        // We're done, let's add the new attributes here\n                        insertAt = i;\n                        break;\n                    }\n                }\n                continue;\n            }\n            if(!video)\n                continue;\n            var fid = lines[i].match(/a=ssrc-group:FID (\\d+) (\\d+)/);\n            if(fid) {\n                ssrc[0] = fid[1];\n                ssrc_fid[0] = fid[2];\n                lines.splice(i, 1); i--;\n                continue;\n            }\n            if(ssrc[0]) {\n                var match = lines[i].match('a=ssrc:' + ssrc[0] + ' cname:(.+)')\n                if(match) {\n                    cname = match[1];\n                }\n                match = lines[i].match('a=ssrc:' + ssrc[0] + ' msid:(.+)')\n                if(match) {\n                    msid = match[1];\n                }\n                match = lines[i].match('a=ssrc:' + ssrc[0] + ' mslabel:(.+)')\n                if(match) {\n                    mslabel = match[1];\n                }\n                match = lines[i].match('a=ssrc:' + ssrc[0] + ' label:(.+)')\n                if(match) {\n                    label = match[1];\n                }\n                if(lines[i].indexOf('a=ssrc:' + ssrc_fid[0]) === 0) {\n                    lines.splice(i, 1); i--;\n                    continue;\n                }\n                if(lines[i].indexOf('a=ssrc:' + ssrc[0]) === 0) {\n                    lines.splice(i, 1); i--;\n                    continue;\n                }\n            }\n            if(lines[i].length == 0) {\n                lines.splice(i, 1); i--;\n                continue;\n            }\n        }\n        if(ssrc[0] < 0) {\n            // Couldn't find a FID attribute, let's just take the first video SSRC we find\n            insertAt = -1;\n            video = false;\n            for(var i=0; i<lines.length; i++) {\n                var mline = lines[i].match(/m=(\\w+) */);\n                if(mline) {\n                    var medium = mline[1];\n                    if(medium === \"video\") {\n                        // New video m-line: make sure it's the first one\n                        if(ssrc[0] < 0) {\n                            video = true;\n                        } else {\n                            // We're done, let's add the new attributes here\n                            insertAt = i;\n                            break;\n                        }\n                    } else {\n                        // New non-video m-line: do we have what we were looking for?\n                        if(ssrc[0] > -1) {\n                            // We're done, let's add the new attributes here\n                            insertAt = i;\n                            break;\n                        }\n                    }\n                    continue;\n                }\n                if(!video)\n                    continue;\n                if(ssrc[0] < 0) {\n                    var value = lines[i].match(/a=ssrc:(\\d+)/);\n                    if(value) {\n                        ssrc[0] = value[1];\n                        lines.splice(i, 1); i--;\n                        continue;\n                    }\n                } else {\n                    var match = lines[i].match('a=ssrc:' + ssrc[0] + ' cname:(.+)')\n                    if(match) {\n                        cname = match[1];\n                    }\n                    match = lines[i].match('a=ssrc:' + ssrc[0] + ' msid:(.+)')\n                    if(match) {\n                        msid = match[1];\n                    }\n                    match = lines[i].match('a=ssrc:' + ssrc[0] + ' mslabel:(.+)')\n                    if(match) {\n                        mslabel = match[1];\n                    }\n                    match = lines[i].match('a=ssrc:' + ssrc[0] + ' label:(.+)')\n                    if(match) {\n                        label = match[1];\n                    }\n                    if(lines[i].indexOf('a=ssrc:' + ssrc_fid[0]) === 0) {\n                        lines.splice(i, 1); i--;\n                        continue;\n                    }\n                    if(lines[i].indexOf('a=ssrc:' + ssrc[0]) === 0) {\n                        lines.splice(i, 1); i--;\n                        continue;\n                    }\n                }\n                if(lines[i].length == 0) {\n                    lines.splice(i, 1); i--;\n                    continue;\n                }\n            }\n        }\n        if(ssrc[0] < 0) {\n            // Still nothing, let's just return the SDP we were asked to munge\n            Janus.warn(\"Couldn't find the video SSRC, simulcasting NOT enabled\");\n            return sdp;\n        }\n        if(insertAt < 0) {\n            // Append at the end\n            insertAt = lines.length;\n        }\n        // Generate a couple of SSRCs (for retransmissions too)\n        // Note: should we check if there are conflicts, here?\n        ssrc[1] = Math.floor(Math.random()*0xFFFFFFFF);\n        ssrc[2] = Math.floor(Math.random()*0xFFFFFFFF);\n        ssrc_fid[1] = Math.floor(Math.random()*0xFFFFFFFF);\n        ssrc_fid[2] = Math.floor(Math.random()*0xFFFFFFFF);\n        // Add attributes to the SDP\n        for(var i=0; i<ssrc.length; i++) {\n            if(cname) {\n                lines.splice(insertAt, 0, 'a=ssrc:' + ssrc[i] + ' cname:' + cname);\n                insertAt++;\n            }\n            if(msid) {\n                lines.splice(insertAt, 0, 'a=ssrc:' + ssrc[i] + ' msid:' + msid);\n                insertAt++;\n            }\n            if(mslabel) {\n                lines.splice(insertAt, 0, 'a=ssrc:' + ssrc[i] + ' mslabel:' + mslabel);\n                insertAt++;\n            }\n            if(label) {\n                lines.splice(insertAt, 0, 'a=ssrc:' + ssrc[i] + ' label:' + label);\n                insertAt++;\n            }\n            // Add the same info for the retransmission SSRC\n            if(cname) {\n                lines.splice(insertAt, 0, 'a=ssrc:' + ssrc_fid[i] + ' cname:' + cname);\n                insertAt++;\n            }\n            if(msid) {\n                lines.splice(insertAt, 0, 'a=ssrc:' + ssrc_fid[i] + ' msid:' + msid);\n                insertAt++;\n            }\n            if(mslabel) {\n                lines.splice(insertAt, 0, 'a=ssrc:' + ssrc_fid[i] + ' mslabel:' + mslabel);\n                insertAt++;\n            }\n            if(label) {\n                lines.splice(insertAt, 0, 'a=ssrc:' + ssrc_fid[i] + ' label:' + label);\n                insertAt++;\n            }\n        }\n        lines.splice(insertAt, 0, 'a=ssrc-group:FID ' + ssrc[2] + ' ' + ssrc_fid[2]);\n        lines.splice(insertAt, 0, 'a=ssrc-group:FID ' + ssrc[1] + ' ' + ssrc_fid[1]);\n        lines.splice(insertAt, 0, 'a=ssrc-group:FID ' + ssrc[0] + ' ' + ssrc_fid[0]);\n        lines.splice(insertAt, 0, 'a=ssrc-group:SIM ' + ssrc[0] + ' ' + ssrc[1] + ' ' + ssrc[2]);\n        sdp = lines.join(\"\\r\\n\");\n        if(!sdp.endsWith(\"\\r\\n\"))\n            sdp += \"\\r\\n\";\n        return sdp;\n    }\n\n    // Helper methods to parse a media object\n    function isAudioSendEnabled(media) {\n        Janus.debug(\"isAudioSendEnabled:\", media);\n        if(media === undefined || media === null)\n            return true;\t// Default\n        if(media.audio === false)\n            return false;\t// Generic audio has precedence\n        if(media.audioSend === undefined || media.audioSend === null)\n            return true;\t// Default\n        return (media.audioSend === true);\n    }\n\n    function isAudioSendRequired(media) {\n        Janus.debug(\"isAudioSendRequired:\", media);\n        if(media === undefined || media === null)\n            return false;\t// Default\n        if(media.audio === false || media.audioSend === false)\n            return false;\t// If we're not asking to capture audio, it's not required\n        if(media.failIfNoAudio === undefined || media.failIfNoAudio === null)\n            return false;\t// Default\n        return (media.failIfNoAudio === true);\n    }\n\n    function isAudioRecvEnabled(media) {\n        Janus.debug(\"isAudioRecvEnabled:\", media);\n        if(media === undefined || media === null)\n            return true;\t// Default\n        if(media.audio === false)\n            return false;\t// Generic audio has precedence\n        if(media.audioRecv === undefined || media.audioRecv === null)\n            return true;\t// Default\n        return (media.audioRecv === true);\n    }\n\n    function isVideoSendEnabled(media) {\n        Janus.debug(\"isVideoSendEnabled:\", media);\n        if(media === undefined || media === null)\n            return true;\t// Default\n        if(media.video === false)\n            return false;\t// Generic video has precedence\n        if(media.videoSend === undefined || media.videoSend === null)\n            return true;\t// Default\n        return (media.videoSend === true);\n    }\n\n    function isVideoSendRequired(media) {\n        Janus.debug(\"isVideoSendRequired:\", media);\n        if(media === undefined || media === null)\n            return false;\t// Default\n        if(media.video === false || media.videoSend === false)\n            return false;\t// If we're not asking to capture video, it's not required\n        if(media.failIfNoVideo === undefined || media.failIfNoVideo === null)\n            return false;\t// Default\n        return (media.failIfNoVideo === true);\n    }\n\n    function isVideoRecvEnabled(media) {\n        Janus.debug(\"isVideoRecvEnabled:\", media);\n        if(media === undefined || media === null)\n            return true;\t// Default\n        if(media.video === false)\n            return false;\t// Generic video has precedence\n        if(media.videoRecv === undefined || media.videoRecv === null)\n            return true;\t// Default\n        return (media.videoRecv === true);\n    }\n\n    function isScreenSendEnabled(media) {\n        Janus.debug(\"isScreenSendEnabled:\", media);\n        if (media === undefined || media === null)\n            return false;\n        if (typeof media.video !== 'object' || typeof media.video.mandatory !== 'object')\n            return false;\n        var constraints = media.video.mandatory;\n        if (constraints.chromeMediaSource)\n            return constraints.chromeMediaSource === 'desktop' || constraints.chromeMediaSource === 'screen';\n        else if (constraints.mozMediaSource)\n            return constraints.mozMediaSource === 'window' || constraints.mozMediaSource === 'screen';\n        else if (constraints.mediaSource)\n            return constraints.mediaSource === 'window' || constraints.mediaSource === 'screen';\n        return false;\n    }\n\n    function isDataEnabled(media) {\n        Janus.debug(\"isDataEnabled:\", media);\n        if(Janus.webRTCAdapter.browserDetails.browser == \"edge\") {\n            Janus.warn(\"Edge doesn't support data channels yet\");\n            return false;\n        }\n        if(media === undefined || media === null)\n            return false;\t// Default\n        return (media.data === true);\n    }\n\n    function isTrickleEnabled(trickle) {\n        Janus.debug(\"isTrickleEnabled:\", trickle);\n        if(trickle === undefined || trickle === null)\n            return true;\t// Default is true\n        return (trickle === true);\n    }\n};\n",
        "output": "str",
        "x": 300,
        "y": 480,
        "wires": [
            [
                "34d3b64b2a9f7c73"
            ]
        ]
    },
    {
        "id": "34d3b64b2a9f7c73",
        "type": "http response",
        "z": "176d1842441d9519",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 480,
        "y": 480,
        "wires": []
    },
    {
        "id": "8c1fa6a43bd564df",
        "type": "template",
        "z": "176d1842441d9519",
        "name": "streaming.js",
        "field": "payload",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// We make use of this 'server' variable to provide the address of the\n// REST Janus API. By default, in this example we assume that Janus is\n// co-located with the web server hosting the HTML pages but listening\n// on a different port (8088, the default for HTTP in Janus), which is\n// why we make use of the 'window.location.hostname' base address. Since\n// Janus can also do HTTPS, and considering we don't really want to make\n// use of HTTP for Janus if your demos are served on HTTPS, we also rely\n// on the 'window.location.protocol' prefix to build the variable, in\n// particular to also change the port used to contact Janus (8088 for\n// HTTP and 8089 for HTTPS, if enabled).\n// In case you place Janus behind an Apache frontend (as we did on the\n// online demos at http://janus.conf.meetecho.com) you can just use a\n// relative path for the variable, e.g.:\n//\n// \t\tvar server = \"/janus\";\n//\n// which will take care of this on its own.\n//\n//\n// If you want to use the WebSockets frontend to Janus, instead, you'll\n// have to pass a different kind of address, e.g.:\n//\n// \t\tvar server = \"ws://\" + window.location.hostname + \":8188\";\n//\n// Of course this assumes that support for WebSockets has been built in\n// when compiling the server. WebSockets support has not been tested\n// as much as the REST API, so handle with care!\n//\n//\n// If you have multiple options available, and want to let the library\n// autodetect the best way to contact your server (or pool of servers),\n// you can also pass an array of servers, e.g., to provide alternative\n// means of access (e.g., try WebSockets first and, if that fails, fall\n// back to plain HTTP) or just have failover servers:\n//\n//\t\tvar server = [\n//\t\t\t\"ws://\" + window.location.hostname + \":8188\",\n//\t\t\t\"/janus\"\n//\t\t];\n//\n// This will tell the library to try connecting to each of the servers\n// in the presented order. The first working server will be used for\n// the whole session.\n//\nvar server = null;\nif(window.location.protocol === 'http:')\n    server = \"http://\"+window.location.hostname+\":8088/janus\";\nelse\n    server = \"https://\"+window.location.hostname+\":8089/janus\";\n\nserver = \"http://\"+window.location.hostname+\":1880/janus\";\n\n\nvar janus = null;\nvar streaming = null;\nvar opaqueId = \"streaming-\"+Janus.randomString(12);\n\nvar bitrateTimer = null;\nvar spinner = null;\n\nvar simulcastStarted = false, svcStarted = false;\n\nvar selectedStream = null;\n\n\n$(document).ready(function() {\n    startJanus();\n});\n\nfunction startJanus(){\n    // defer until adaptor is present\n    let adapt;\n    try {\n        adapt = adapter;\n    } catch(e){\n        console.log(e);\n        console.log('janus startup deferred');\n    }\n    if (!adapt){\n        setTimeout(startJanus, 100);\n        return;\n    }\n\n    // Initialize the library (all console debuggers enabled)\n    Janus.init({debug: \"all\", callback: function() {\n        // Use a button to start the demo\n        let start = function() {\n            // Make sure the browser supports WebRTC\n            if(!Janus.isWebrtcSupported()) {\n                bootbox.alert(\"No WebRTC support... \");\n                return;\n            }\n            // Create session\n            janus = new Janus(\n                {\n                    server: server,\n                    success: function() {\n                        // Attach to streaming plugin\n                        janus.attach(\n                            {\n                                plugin: \"janus.plugin.streaming\",\n                                opaqueId: opaqueId,\n                                success: function(pluginHandle) {\n                                    //$('#details').remove();\n                                    streaming = pluginHandle;\n                                    Janus.log(\"Plugin attached! (\" + streaming.getPlugin() + \", id=\" + streaming.getId() + \")\");\n                                    // Setup streaming session\n                                    //$('#update-streams').click(updateStreamsList);\n                                    updateStreamsList(startStream);\n                                    /*\n                                    $('#start').removeAttr('disabled').html(\"Stop\")\n                                        .click(function() {\n                                            $(this).attr('disabled', true);\n                                            clearInterval(bitrateTimer);\n                                            janus.destroy();\n                                            $('#streamslist').attr('disabled', true);\n                                            $('#watch').attr('disabled', true).unbind('click');\n                                            $('#start').attr('disabled', true).html(\"Bye\").unbind('click');\n                                        });\n                                    */\n                                },\n                                error: function(error) {\n                                    Janus.error(\"  -- Error attaching plugin... \", error);\n                                    bootbox.alert(\"Error attaching plugin... \" + error);\n                                },\n                                onmessage: function(msg, jsep) {\n                                    Janus.debug(\" ::: Got a message :::\");\n                                    Janus.debug(msg);\n                                    var result = msg[\"result\"];\n                                    if(result !== null && result !== undefined) {\n                                        if(result[\"status\"] !== undefined && result[\"status\"] !== null) {\n                                            var status = result[\"status\"];\n                                            if(status === 'starting'){\n                                                //$('#status').removeClass('hide').text(\"Starting, please wait...\").show();\n                                            } else if(status === 'started') {\n                                                //$('#status').removeClass('hide').text(\"Started\").show();\n                                            } else if(status === 'stopped')\n                                                stopStream();\n                                        } else if(msg[\"streaming\"] === \"event\") {\n                                            // Is simulcast in place?\n                                            var substream = result[\"substream\"];\n                                            var temporal = result[\"temporal\"];\n                                            if((substream !== null && substream !== undefined) || (temporal !== null && temporal !== undefined)) {\n                                                if(!simulcastStarted) {\n                                                    simulcastStarted = true;\n                                                    addSimulcastButtons(temporal !== null && temporal !== undefined);\n                                                }\n                                                // We just received notice that there's been a switch, update the buttons\n                                                updateSimulcastButtons(substream, temporal);\n                                            }\n                                            // Is VP9/SVC in place?\n                                            var spatial = result[\"spatial_layer\"];\n                                            temporal = result[\"temporal_layer\"];\n                                            if((spatial !== null && spatial !== undefined) || (temporal !== null && temporal !== undefined)) {\n                                                if(!svcStarted) {\n                                                    svcStarted = true;\n                                                    //addSvcButtons();\n                                                }\n                                                // We just received notice that there's been a switch, update the buttons\n                                                //updateSvcButtons(spatial, temporal);\n                                            }\n                                        }\n                                    } else if(msg[\"error\"] !== undefined && msg[\"error\"] !== null) {\n                                        bootbox.alert(msg[\"error\"]);\n                                        stopStream();\n                                        return;\n                                    }\n                                    if(jsep !== undefined && jsep !== null) {\n                                        Janus.debug(\"Handling SDP as well...\");\n                                        Janus.debug(jsep);\n                                        // Offer from the plugin, let's answer\n                                        streaming.createAnswer(\n                                            {\n                                                jsep: jsep,\n                                                // We want recvonly audio/video and, if negotiated, datachannels\n                                                media: { audioSend: false, videoSend: false, data: true },\n                                                success: function(jsep) {\n                                                    Janus.debug(\"Got SDP!\");\n                                                    Janus.debug(jsep);\n                                                    var body = { \"request\": \"start\" };\n                                                    streaming.send({\"message\": body, \"jsep\": jsep});\n                                                    //$('#watch').html(\"Stop\").removeAttr('disabled').click(stopStream);\n                                                },\n                                                error: function(error) {\n                                                    Janus.error(\"WebRTC error:\", error);\n                                                    bootbox.alert(\"WebRTC error... \" + JSON.stringify(error));\n                                                }\n                                            });\n                                    }\n                                },\n                                onremotestream: function(stream) {\n                                    Janus.debug(\" ::: Got a remote stream :::\");\n                                    Janus.debug(stream);\n                                    var addButtons = false;\n                                    if($('#remotevideo').length === 0) {\n                                        addButtons = true;\n                                        $('#stream').append('<video class=\"rounded centered hide\" id=\"remotevideo\" width=\"100%\" height=\"100%\" autoplay playsinline controls />');\n                                        // Show the stream and hide the spinner when we get a playing event\n                                        $(\"#remotevideo\").bind(\"playing\", function () {\n                                            $('#waitingvideo').remove();\n                                            if(this.videoWidth)\n                                                $('#remotevideo').removeClass('hide').show();\n                                            if(spinner !== null && spinner !== undefined)\n                                                spinner.stop();\n                                            spinner = null;\n                                            var videoTracks = stream.getVideoTracks();\n                                            if(videoTracks === null || videoTracks === undefined || videoTracks.length === 0)\n                                                return;\n                                            var width = this.videoWidth;\n                                            var height = this.videoHeight;\n                                            //$('#curres').removeClass('hide').text(width+'x'+height).show();\n                                            if(Janus.webRTCAdapter.browserDetails.browser === \"firefox\") {\n                                                // Firefox Stable has a bug: width and height are not immediately available after a playing\n                                                setTimeout(function() {\n                                                    var width = $(\"#remotevideo\").get(0).videoWidth;\n                                                    var height = $(\"#remotevideo\").get(0).videoHeight;\n                                                    //$('#curres').removeClass('hide').text(width+'x'+height).show();\n                                                }, 2000);\n                                            }\n                                        });\n                                    }\n                                    Janus.attachMediaStream($('#remotevideo').get(0), stream);\n                                    var videoTracks = stream.getVideoTracks();\n                                    if(videoTracks === null || videoTracks === undefined || videoTracks.length === 0) {\n                                        // No remote video\n                                        $('#remotevideo').hide();\n                                        if($('#stream .no-video-container').length === 0) {\n                                            $('#stream').append(\n                                                '<div class=\"no-video-container\">' +\n                                                '<i class=\"fa fa-video-camera fa-5 no-video-icon\"></i>' +\n                                                '<span class=\"no-video-text\">No remote video available</span>' +\n                                                '</div>');\n                                        }\n                                    } else {\n                                        $('#stream .no-video-container').remove();\n                                        $('#remotevideo').removeClass('hide').show();\n                                    }\n                                    if(!addButtons)\n                                        return;\n                                    if(videoTracks && videoTracks.length &&\n                                        (Janus.webRTCAdapter.browserDetails.browser === \"chrome\" ||\n                                            Janus.webRTCAdapter.browserDetails.browser === \"firefox\" ||\n                                            Janus.webRTCAdapter.browserDetails.browser === \"safari\")) {\n                                        $('#curbitrate').removeClass('hide').show();\n                                        bitrateTimer = setInterval(function() {\n                                            // Display updated bitrate, if supported\n                                            var bitrate = streaming.getBitrate();\n                                            //~ Janus.debug(\"Current bitrate is \" + streaming.getBitrate());\n                                            //$('#curbitrate').text(bitrate);\n                                            // Check if the resolution changed too\n                                            var width = $(\"#remotevideo\").get(0).videoWidth;\n                                            var height = $(\"#remotevideo\").get(0).videoHeight;\n                                            if(width > 0 && height > 0){\n                                                //$('#curres').removeClass('hide').text(width+'x'+height).show();\n                                            }\n                                        }, 1000);\n                                    }\n                                },\n                                ondataopen: function(data) {\n                                    Janus.log(\"The DataChannel is available!\");\n                                    $('#waitingvideo').remove();\n                                    $('#stream').append(\n                                        '<input class=\"form-control\" type=\"text\" id=\"datarecv\" disabled></input>'\n                                    );\n                                    if(spinner !== null && spinner !== undefined)\n                                        spinner.stop();\n                                    spinner = null;\n                                },\n                                ondata: function(data) {\n                                    Janus.debug(\"We got data from the DataChannel! \" + data);\n                                    $('#datarecv').val(data);\n                                },\n                                oncleanup: function() {\n                                    Janus.log(\" ::: Got a cleanup notification :::\");\n                                    $('#waitingvideo').remove();\n                                    $('#remotevideo').remove();\n                                    $('#datarecv').remove();\n                                    $('.no-video-container').remove();\n                                    $('#bitrate').attr('disabled', true);\n                                    $('#bitrateset').html('Bandwidth<span class=\"caret\"></span>');\n                                    $('#curbitrate').hide();\n                                    if(bitrateTimer !== null && bitrateTimer !== undefined)\n                                        clearInterval(bitrateTimer);\n                                    bitrateTimer = null;\n                                    $('#curres').hide();\n                                    $('#simulcast').remove();\n                                    simulcastStarted = false;\n                                }\n                            });\n                    },\n                    error: function(error) {\n                        Janus.error(error);\n                        bootbox.alert(error, function() {\n                            window.location.reload();\n                        });\n                    },\n                    destroyed: function() {\n                        window.location.reload();\n                    }\n                });\n            };\n            start();\n        }});\n}\n\nfunction updateStreamsList(cb) {\n    $('#update-streams').unbind('click').addClass('fa-spin');\n    var body = { \"request\": \"list\" };\n    Janus.debug(\"Sending message (\" + JSON.stringify(body) + \")\");\n    streaming.send({\"message\": body, success: function(result) {\n            setTimeout(function() {\n                $('#update-streams').removeClass('fa-spin').click(updateStreamsList);\n            }, 500);\n            if(result === null || result === undefined) {\n                bootbox.alert(\"Got no response to our query for available streams\");\n                return;\n            }\n            if(result[\"list\"] !== undefined && result[\"list\"] !== null) {\n                $('#streams').removeClass('hide').show();\n                $('#streamslist').empty();\n                $('#watch').attr('disabled', true).unbind('click');\n                var list = result[\"list\"];\n                Janus.log(\"Got a list of available streams\");\n                Janus.debug(list);\n                for(var mp in list) {\n                    Janus.debug(\"  >> [\" + list[mp][\"id\"] + \"] \" + list[mp][\"description\"] + \" (\" + list[mp][\"type\"] + \")\");\n                    selectedStream = list[mp][\"id\"];\n                    //$('#streamslist').append(\"<li><a href='#' id='\" + list[mp][\"id\"] + \"'>\" + list[mp][\"description\"] + \" (\" + list[mp][\"type\"] + \")\" + \"</a></li>\");\n                }\n                /*\n                $('#streamslist a').unbind('click').click(function() {\n                    selectedStream = $(this).attr(\"id\");\n                    $('#streamset').html($(this).html()).parent().removeClass('open');\n                    return false;\n\n                });*/\n                //$('#watch').removeAttr('disabled').unbind('click').click(startStream);\n                if (cb){\n                    cb();\n                }\n            }\n        }});\n}\n\nfunction startStream() {\n    Janus.log(\"Selected video id #\" + selectedStream);\n    if(selectedStream === undefined || selectedStream === null) {\n        bootbox.alert(\"Select a stream from the list\");\n        return;\n    }\n    $('#streamset').attr('disabled', true);\n    $('#streamslist').attr('disabled', true);\n    $('#watch').attr('disabled', true).unbind('click');\n    var body = { \"request\": \"watch\", id: parseInt(selectedStream) };\n    streaming.send({\"message\": body});\n    // No remote video yet\n    //$('#stream').append('<video class=\"rounded centered\" id=\"waitingvideo\" width=320 height=240 />');\n    if(spinner == null) {\n        var target = document.getElementById('stream');\n        spinner = new Spinner({top:100}).spin(target);\n    } else {\n        spinner.spin();\n    }\n}\n\nfunction stopStream() {\n    $('#watch').attr('disabled', true).unbind('click');\n    var body = { \"request\": \"stop\" };\n    streaming.send({\"message\": body});\n    streaming.hangup();\n    $('#streamset').removeAttr('disabled');\n    $('#streamslist').removeAttr('disabled');\n    $('#watch').html(\"Watch or Listen\").removeAttr('disabled').unbind('click').click(startStream);\n    $('#status').empty().hide();\n    $('#bitrate').attr('disabled', true);\n    $('#bitrateset').html('Bandwidth<span class=\"caret\"></span>');\n    $('#curbitrate').hide();\n    if(bitrateTimer !== null && bitrateTimer !== undefined)\n        clearInterval(bitrateTimer);\n    bitrateTimer = null;\n    $('#curres').empty().hide();\n    $('#simulcast').remove();\n    simulcastStarted = false;\n}\n\n",
        "output": "str",
        "x": 310,
        "y": 520,
        "wires": [
            [
                "b4f0bbb597483725"
            ]
        ]
    },
    {
        "id": "b4f0bbb597483725",
        "type": "http response",
        "z": "176d1842441d9519",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 470,
        "y": 520,
        "wires": []
    },
    {
        "id": "f8da97b6358a42b6",
        "type": "http in",
        "z": "176d1842441d9519",
        "name": "",
        "url": "/js/janus.js",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 480,
        "wires": [
            [
                "0f4950dfde7d1c9c"
            ]
        ]
    },
    {
        "id": "7bfa1f0ff72af7f1",
        "type": "http in",
        "z": "176d1842441d9519",
        "name": "",
        "url": "/js/streaming.js",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "8c1fa6a43bd564df"
            ]
        ]
    },
    {
        "id": "56c84bb7f18f7e8e",
        "type": "http in",
        "z": "176d1842441d9519",
        "name": "",
        "url": "/css/streaming.css",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 560,
        "wires": [
            [
                "b777e75ae790bcb5"
            ]
        ]
    },
    {
        "id": "b777e75ae790bcb5",
        "type": "template",
        "z": "176d1842441d9519",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "css",
        "syntax": "mustache",
        "template": ".rounded {\n    border-radius: 5px;\n}\n\n.centered {\n    display: block;\n    margin: auto;\n}\n\n.relative {\n    position: relative;\n}\n\n.navbar-brand {\n    margin-left: 0px !important;\n}\n\n.navbar-default {\n    background-image: linear-gradient(#0EB2A9, #4383B4 60%, #7356C1);\n}\n\n.navbar-header {\n    padding-left: 40px;\n}\n\n.margin-sm {\n    margin: 5px !important;\n}\n.margin-md {\n    margin: 10px !important;\n}\n.margin-xl {\n    margin: 20px !important;\n}\n.margin-bottom-sm {\n    margin-bottom: 5px !important;\n}\n.margin-bottom-md {\n    margin-bottom: 10px !important;\n}\n.margin-bottom-xl {\n    margin-bottom: 20px !important;\n}\n\n.divider {\n    width: 100%;\n    text-align: center;\n}\n\n.divider hr {\n    margin-left: auto;\n    margin-right: auto;\n    width: 45%;\n}\n\n.fa-2 {\n    font-size: 2em !important;\n}\n.fa-3 {\n    font-size: 4em !important;\n}\n.fa-4 {\n    font-size: 7em !important;\n}\n.fa-5 {\n    font-size: 12em !important;\n}\n.fa-6 {\n    font-size: 20em !important;\n}\n\ndiv.no-video-container {\n    position: relative;\n}\n\n.no-video-icon {\n    width: 100%;\n    height: 240px;\n    text-align: center;\n}\n\n.no-video-text {\n    text-align: center;\n    position: absolute;\n    bottom: 0px;\n    right: 0px;\n    left: 0px;\n    font-size: 24px;\n}\n\npre {\n    white-space: pre-wrap;\n    white-space: -moz-pre-wrap;\n    white-space: -pre-wrap;\n    white-space: -o-pre-wrap;\n    word-wrap: break-word;\n}\n\n.januscon {\n    font-weight: bold;\n    animation: pulsating 1s infinite;\n}\n@keyframes pulsating {\n    30% {\n        color: #0EB2A9;\n    }\n}\n",
        "output": "str",
        "x": 320,
        "y": 560,
        "wires": [
            [
                "feabcb654f08202d"
            ]
        ]
    },
    {
        "id": "feabcb654f08202d",
        "type": "http response",
        "z": "176d1842441d9519",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 480,
        "y": 560,
        "wires": []
    },
    {
        "id": "ce4be4886258cd14",
        "type": "inject",
        "z": "176d1842441d9519",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "fns",
        "payloadType": "str",
        "x": 410,
        "y": 100,
        "wires": [
            [
                "516d6c28be79e7cc"
            ]
        ]
    },
    {
        "id": "516d6c28be79e7cc",
        "type": "function",
        "z": "176d1842441d9519",
        "name": "ocv functions",
        "func": "let require = global.get('require');\n\nlet cvwrap = flow.get('cvwrap');\n\n/* example use\nlet cvwrap = flow.get('cvwrap');\nif (cvwrap){\n    let cvobj = cvwrap();\n    let im2 = cvobj.fns.canny(cvobj, im);\n}\n*/\n\n\nif (!cvwrap){\n    let cvobj = {\n        cv2: require('@u4/opencv4nodejs'),\n        framedata:{\n            \n        }\n    };\n    cvwrap = function(){\n        return cvobj;\n    };\n}\n\nflow.set('cvwrap', cvwrap);\n\nlet cvobj = cvwrap();\n\ncvobj.fns = cvobj.fns || {};\n\nnode.warn(cvobj);\n\n\ncvobj.fns.canny = function(cvobj, im, cb){\n    //let mono = im.convertTo(cvobj.cv2.CV_U8C1);\n    //console.log('canny ', cvobj.cv2.COLOR_BGR2GRAY);\n    \n    im.cvtColorAsync(cvobj.cv2.COLOR_BGR2GRAY, (err, mono)=>{\n        if (err){\n            if (cb){\n                cb(err);\n            }\n            return;\n        }\n        const lowThresh = 200;\n        const highThresh = 400;\n        const iterations = 1;\n    \n        let canny = mono.cannyAsync(lowThresh, highThresh, (err, im)=>{\n            mono.release();\n            if (err){\n                if (cb){\n                    cb(err);\n                }\n                return;\n            }\n            //console.log('cannydone');\n            const dilated = im.dilateAsync(\n                cvobj.cv2.getStructuringElement(cvobj.cv2.MORPH_ELLIPSE, new cvobj.cv2.Size(2, 2)),\n                new cvobj.cv2.Point(-1, -1),\n                iterations, \n                (err, im2)=>{\n                    if (cb){\n                        cb(err, im2);\n                    }\n                }\n            );            \n        });\n    });\n};\n\ncvobj.fns.resolveColour = function(colour){\n    if (colour.x === undefined){\n        if (cvobj.colours[colour]){\n            colour = cvobj.colours[colour];\n        } else {\n            colour = cvobj.colours['white'];\n        }\n    }\n    return colour;\n}\n\n/*\nexpects [{\n  rect: new cv2.Rect(x, y, w, h),\n  rectcolour?: 'white',\n  rectthickness?: 2,\n  text?: 'hello',\n  textcolour?: 'white',\n  textx?: 0,\n  texty?: 0,\n}, ...];\n*/\n\ncvobj.fns.drawRects = function(im, rectstructs){\n    for (let i = 0; i < rectstructs.length; i++){\n        let rectstruct = rectstructs[i];\n        let rect = rectstruct.rect;\n        \n        if (rect){\n            let rectcolour = rectstruct.rectcolour;\n            let rectthickness = rectstruct.rectthickness || 2;\n            rectcolour = rectcolour || 'white';\n            rectcolour = cvobj.fns.resolveColour(rectcolour);\n\n            im.drawRectangle(\n                rect,\n                rectcolour,\n                rectthickness,\n                cvobj.cv2.LINE_8\n            );\n            \n            if (rectstruct.text){\n                let text = rectstruct.text;\n                let textcolour = rectstruct.textcolour;\n                textcolour = textcolour || rectcolour;\n                textcolour = cvobj.fns.resolveColour(textcolour);\n                let textoffsetx = rectstruct.textx || 0;\n                let textoffsety = rectstruct.texty || 15;\n                \n                const org = new cvobj.cv2.Point(rect.x + textoffsetx, rect.y + textoffsety);\n                const fontFace = cvobj.cv2.FONT_HERSHEY_SIMPLEX;\n                const fontScale = 0.5;\n                const textColor = textcolour;\n                const thickness = rectthickness;\n                \n                // put text on the object\n                im.putText(text, org, fontFace, fontScale, textColor, thickness);                \n            }\n        }\n    }\n}\n\ncvobj.fns.overlay = function(im, overlay, cb){\n    let res;\n    if (overlay){\n        res = overlay.or(im);\n        im.release();\n    } else {\n        res = im;\n    }\n    if (cb){\n        cb(res);\n        return;\n    }\n    \n    return res;\n}\n\n\n// common colours I may use.\n// NOTE: I gave the colours '1' as black so that mat.or(matt) will use the 'black' in other colour channels.\ncvobj.colours = {\n    white: new cvobj.cv2.Vec3(255, 255, 255),\n    blue: new cvobj.cv2.Vec3(255, 1, 1),\n    green: new cvobj.cv2.Vec3(1, 255, 1),\n    red: new cvobj.cv2.Vec3(1, 1, 255),\n    yellow: new cvobj.cv2.Vec3(1, 255, 255),\n    magenta: new cvobj.cv2.Vec3(255, 1, 255),\n    cyan: new cvobj.cv2.Vec3(255, 255, 1),\n    black: new cvobj.cv2.Vec3(0, 0, 0),\n    gray: new cvobj.cv2.Vec3(128, 128, 128),\n    darkgray: new cvobj.cv2.Vec3(64, 64, 64),\n    lightgray: new cvobj.cv2.Vec3(192, 192, 192),\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 140,
        "wires": [
            [
                "a7cba1ea8299d3b8"
            ]
        ]
    },
    {
        "id": "87f83fbaaed6481b",
        "type": "inject",
        "z": "176d1842441d9519",
        "name": "edgeit",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "edgeit",
        "payloadType": "str",
        "x": 90,
        "y": 180,
        "wires": [
            [
                "033027e3240dd42b"
            ]
        ]
    },
    {
        "id": "27c55d9db49bfa90",
        "type": "inject",
        "z": "176d1842441d9519",
        "name": "edgeoff",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "edgeoff",
        "payloadType": "str",
        "x": 90,
        "y": 220,
        "wires": [
            [
                "033027e3240dd42b"
            ]
        ]
    },
    {
        "id": "f30536639683310c",
        "type": "http in",
        "z": "176d1842441d9519",
        "name": "",
        "url": "/janus*",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 380,
        "wires": [
            [
                "64ca8ffa2f0f0d74",
                "806c50d3a3ab2540"
            ]
        ]
    },
    {
        "id": "806c50d3a3ab2540",
        "type": "debug",
        "z": "176d1842441d9519",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 240,
        "wires": []
    },
    {
        "id": "fc1c1d1b3aaddbcb",
        "type": "comment",
        "z": "176d1842441d9519",
        "name": "readme",
        "info": "Injecting start will require opencv, and add some functions to an opaque structure retunred by a function in 'flow'.\nIt will then start the async opencv loop, which opens a capture and a writer, and flows frames through opencv, sending them to Janus.\n\nOpen http://<host>:1880/video.html, and click play on the video element. \n\nYou should now have low latency WebRTC video to the remote browser.\n\nAll pages and API data is served through node-red.\nThe video is rtp (?) streamed to the browser by Janus.\n\nThe video element will show the LAST stream configured in Janus, not a specific named stream.\n",
        "x": 90,
        "y": 60,
        "wires": []
    },
    {
        "id": "a7cba1ea8299d3b8",
        "type": "function",
        "z": "176d1842441d9519",
        "name": "capture_sink_options",
        "func": "\nlet cvwrap = flow.get('cvwrap');\nlet cvobj;\nif (cvwrap){\n    cvobj = cvwrap();\n    if (cvobj){\n    \n        // measurements done on RPi3b 32 bit with frame number written into image.\n        cvobj.captureSinkOptions = {\n            opts640_640_25: { // 25fps, 34% cpu\n                capfps: 25, capwidth: 640, capheight: 480,\n                sinkfps: 25, sinkwidth: 640, sinkheight: 480, \n                sinklevel: 3, sinkprofile:''\n            },\n\n            opts640_640_2997: { // 30fps, 30% cpu - but sometimes  GStreamer warning: Error pushing buffer to GStreamer pipeline\n                capfps: 29.97, capwidth: 640, capheight: 480,\n                sinkfps: 29.97, sinkwidth: 640, sinkheight: 480, \n                sinklevel: 3, sinkprofile:''\n            },\n            \n            opts640_640_30: { // 30fps, 38% cpu - oddly.  Sometimes GStreamer warning: Error pushing buffer to GStreamer pipeline - \n                // but after runnig 25, ok?\n                capfps: 30, capwidth: 640, capheight: 480,\n                sinkfps: 30, sinkwidth: 640, sinkheight: 480, \n                sinklevel: 3, sinkprofile:''\n            },\n\n            opts640_640_60: { // 60fps, ~70% cpu\n                capfps: 60, capwidth: 640, capheight: 480,\n                sinkfps: 60, sinkwidth: 640, sinkheight: 480, \n                sinklevel: 4, sinkprofile:''\n            },\n\n            opts640_640_90: { // 88-90fps, ~70% cpu - fastest framerate available at this res?\n                capfps: 90, capwidth: 640, capheight: 480,\n                sinkfps: 90, sinkwidth: 640, sinkheight: 480, \n                sinklevel: 4, sinkprofile:''\n            },\n\n            opts640_640_120: { // -> error failed to open capture\n                capfps: 120, capwidth: 640, capheight: 480,\n                sinkfps: 120, sinkwidth: 640, sinkheight: 480, \n                sinklevel: 4, sinkprofile:''\n            },\n\n            opts1280_1280: { // 25fps, 70% cpu\n                capfps: 25, capwidth: 1280, capheight: 720,\n                sinkfps: 25, sinkwidth: 1280, sinkheight: 720,\n                sinklevel: 4, sinkprofile:''\n            },\n\n            opts1280_1280_60: { // -> error\n                capfps: 60, capwidth: 1280, capheight: 720,\n                sinkfps: 60, sinkwidth: 1280, sinkheight: 720,\n                sinklevel: 4, sinkprofile:''\n            },\n\n            opts1280_1280_30: { // -> error\n                capfps: 30, capwidth: 1280, capheight: 720,\n                sinkfps: 30, sinkwidth: 1280, sinkheight: 720,\n                sinklevel: 4, sinkprofile:''\n            },\n        \n            opts1280_640_gst: { // 25fps, 63% cpu\n                capfps: 25, capwidth: 1280, capheight: 720,\n                sinkfps: 25, sinkwidth: 640, sinkheight: 480,\n                sinklevel: 3, sinkprofile:'',\n                scaler:'gst', // 'gst'\n            },\n        \n            opts1280_640_ocv: { // 25fps, 160% cpu\n                capfps: 25, capwidth: 1280, capheight: 720,\n                sinkfps: 25, sinkwidth: 640, sinkheight: 480,\n                sinklevel: 3, sinkprofile:'',\n                scaler:'ocv', // 'gst'\n            },\n            \n            opts1920_1920: { // note: 5fps, 35% cpu\n                capfps: 25, capwidth: 1920, capheight: 1080,\n                sinkfps: 25, sinkwidth: 1920, sinkheight: 1080,\n                sinklevel: 4, sinkprofile:''\n            },\n        \n            opts1920_640_gst: { // note: 5fps 35% cpu???\n                capfps: 25, capwidth: 1920, capheight: 1080,\n                sinkfps: 25, sinkwidth: 640, sinkheight: 480,\n                sinklevel: 3, sinkprofile:'',\n                scaler:'gst', // 'gst'\n            },\n        };\n        \n        // the one we choose....\n        //cvobj.capture_opts = cvobj.captureSinkOptions.opts640_640;\n        //cvobj.capture_opts = cvobj.captureSinkOptions.opts1280_640_gst;\n        cvobj.capture_opts = cvobj.captureSinkOptions.opts640_640_25;\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 140,
        "wires": [
            [
                "033027e3240dd42b"
            ]
        ]
    },
    {
        "id": "a40ab70b8f00ef4f",
        "type": "ui_template",
        "z": "176d1842441d9519",
        "group": "efe35e9cc96dd9a2",
        "name": "videopanel",
        "order": 2,
        "width": "12",
        "height": "9",
        "format": "    <script type=\"text/javascript\" src=\"/js/streaming.js\"></script>\n    <div class=\"panel-body\" id=\"stream\" style=\"width:100%; height:99%;\"></div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 360,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "7b73d22630d01a93",
        "type": "ui_template",
        "z": "176d1842441d9519",
        "group": "efe35e9cc96dd9a2",
        "name": "HeaderScripts",
        "order": 2,
        "width": "12",
        "height": "9",
        "format": "    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/webrtc-adapter/6.4.0/adapter.min.js\" ></script>\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/1.7.2/jquery.min.js\" ></script>\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.0.2/js/bootstrap.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/4.1.0/bootbox.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/spin.js/2.3.2/spin.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.1.3/toastr.min.js\"></script>\n    <script type=\"text/javascript\" src=\"/js/janus.js\" ></script>\n    <link rel=\"stylesheet\" href=\"/css/streaming.css\" type=\"text/css\"/>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 560,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "efe35e9cc96dd9a2",
        "type": "ui_group",
        "name": "Default",
        "tab": "b644d5b8f2ddfa3f",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b644d5b8f2ddfa3f",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]